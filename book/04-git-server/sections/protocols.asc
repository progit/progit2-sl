=== Protokoli

Git lahko uporablja štiri glavne protokole za prenos podatkov: Local, HTTP, Secure Shell (SSH) in Git.
Tu bomo govorili, kaj so in katere osnovne okoliščine bi želeli (ali ne želeli) imeti, da jih uporabljate.

==== Lokalni protokol

(((protocols, local)))
Najosnovnejši je _lokalni protokol_, kjer je oddaljeni repozitorij v drugem direktoriju na disku na istem gostitelju.
To se uporablja pogostokrat, če imajo vsi v vaši ekipi dostop do deljenega datotečnega sistema, kot je https://en.wikipedia.org/wiki/Network_File_System[NFS^] mount ali v manj verjetnem primeru, da se vsi prijavijo v isti računalnik.
Zadnje ne bi bilo idealno, ker bi vsa vaša instanca repozitorija kode domovala na istem računalniku, kar naredi katastrofične izgube bolj verjetne.

Če imate deljeni priklopljeni datotečni sistem, potem lahko klonirate, potiskate in vlečete iz lokalnega datotečno osnovanega repozitorija.
Da tako klonirate repozitorij ali ga dodate kot oddaljenega k obstoječemu projektu, uporabite pot do repozitorija kot URL.
Na primer, da klonirate lokalni repozitorij, lahko poeženete nekaj takega:

[source,console]
----
$ git clone /srv/git/project.git
----

Ali pa lahko naredite to:

[source,console]
----
$ git clone file:///srv/git/project.git
----

Git operira malenkost drugače, če izrecno določite `file://` na začetku URL-ja.
Če določite samo pot, Git poskuša uporabiti trde povezave ali pa direktno kopira datoteke, ki jih potrebuje.
Če določite `file://`, Git požene proces, ki ga običajno uporablja za prenos datotek podatkov preko omrežja, kar je v splošnem veliko manj učinkovita metoda.
Glavni razlog za določanje predpone `file://` je, da želite čisto kopijo repozitorija z izpuščenimi neznanimi referencami ali objekti - v splošnem po uvozu iz drugega sistema nadzora različic ali česa podobnega (glejte <<ch10-git-internals#ch10-git-internals>> za opravila vzdrževanja).
Tu bomo uporabili običajno pot, saj je to skoraj vedno hitrejše.

Da dodate lokalni repozitorij obstoječemu projektu Git, lahko poženete nekaj takega:

[source,console]
----
$ git remote add local_proj /srv/git/project.git
----

Nato lahko potiskate ali vlečete iz te daljave preko vaše nove daljave imenovane `local_proj`, kot bi to naredili preko omrežja.

===== Prednosti

Prednosti datotečno osnovanih repozitorijev so, da so enostavni in da uporabljajo obstoječe pravice datotek in dostopa omrežja.
Če že imate deljeni datotečni sistem, do katerega ima dostop celotna ekipa, je nastavitev repozitorija zelo enostavna.
Prilepite golo kopijo repozitorija nekam, kjer ima vsakdo deljeni dostop in nastavite pravice pisanja/branja, kakor bi to naredili za katerikoli drugi deljeni direktorij.
S tem namenom bomo govorili, kako izvoziti golo kopijo repozitorija v <<ch04-git-on-the-server#_getting_git_on_a_server>>.

To je tudi dobra možnost za hitro prijetje dela iz delovnega repozitorija nekoga drugega.
Če vi in vaš sodelavec delata na istem projektu in od vas želi, da nekaj pogledate, je pogon ukaza, kot je `git pull /home/john/project`, pogostokrat enostavnejši kot potiskanje na oddaljeni strežnik in da nato prenesete od tam.

===== Slabosti

Slabosti te metode so, da je deljeni dostop v splošnem težji za nastaviti in doseči iz večih lokacij kot pa osnovni dostop omrežja.
Če želite potisniti iz vašega prenosnika, ko ste doma, morate priklopiti oddaljeni disk, kar je lahko težko in počasno v primerjavi z dostopom na osnovi omrežja.

Pomembno je omeniti, da to ni nujno najhitrejša opcija, če uporabljate deljeni priklop neke vrste.
Lokalni repozitorij je hiter samo, če imate hiter dostop do podatkov.
Repozitorij na NFS je pogostokrat počasnejši kot repozitorij preko SSH na istem strežniku, kar omogoča Gitu, da poganja lokalne diske na vsakem sistemu.

In nazadnje, ta protokol ne ščiti repozitorija proti škodi po nesreči.
Vsak uporabnik ima polni lupinski dostop do "`oddaljenega`" direktorija in nič jim ne preprečuje spremeniti ali odstraniti notranjih datotek Git ter poškodovati repozitorij.

==== Protokoli HTTP

Git lahko komunicira preko HTTP v dveh različnih načinih.
Pred Git 1.6.6 je bil samo en način, da to lahko naredi, kar je bilo zelo enostavno in v splošnem samo za branje.
V različici 1.6.6 je bil predstavljen nov pametni protokol, ki je vključeval, da je bil Git sposoben se pametno pogajati pri prenosu podatkov na podoben način, kakor to dela preko SSH.
V zadnjih nekaj letih, je ta novi protokol HTTP postal zelo popularen, saj je enostavnejši za uporabnika in pametnejši, kako komunicira.
Novejša različica je pogostokrat omenjena kot protokol _Smart_ HTTP in starejši način kot _Dumb_ HTTP.
Najprej bomo pokrili novejši protokol Smart HTTP.

===== Pametni HTTP

(((protocols, smart HTTP)))
Pametni oz t.i. Smart protokol HTTP operira zelo podobno kot protokola SSH ali Git, vendar se poganja preko standardnih vrat HTTPS in lahko uporablja različne mehanizne avtentikacije HTTP, kar pomeni, da je enostavnejši na uporabniški strani kot SSH, saj lahko uporabite stvari, kot je osnovna avtentikacija z uporabniškim imenom in geslom namesto, da nastavljanja ključev SSH.

Verjetno je sedaj postal najpopularnejši način za uporabo Gita, saj je lahko nastavljen tako, da streže tako anonimno, kot je protokol `git://`, kot je tudi lahko potisnjen preko z overitvijo in enkripcijo, kakršen je protokol SSH.
Namesto, da morate za te stvari nastavljati različne URL-je, lahko sedaj uporabite en URL za oba.
Če poskusite potisniti in repozitorij zahteva overitev (kar bi običajno moral), strežnik lahko vpraša za uporabniško ime in geslo.
Enako velja za bralni dostop.

V bistvu za storitve, kot je GitHub, je URL, ki ga uporabljate za ogled repozitorija na spletu (na primer https://github.com/schacon/simplegit[^]), enak URL-ju, ki ga lahko uporabite za kloniranje in potiskanje, če imate dostop.

===== Neumni HTTP

(((protocols, dumb HTTP)))
Če se strežnik ne odzove s pametno Git HTTP storitvijo, se bo odjemalec Git poskušal vrniti k enostavnejšemu neumnemu oz. _Dumb_ protokolu HTTP.
Neummni protokol pričakuje, da je goli repozitorij Git ponujen kot običajne datoteke s spletnega strežnika.
Lepota neumnega protokola HTTP je enostavnost nastavitve.
V osnovi je vse, kar morate narediti, dati goli repozitorij Git pod vaš vrhnji dokumentni HTTP direktorij in nastaviti določeno kjuko `post-update` ter ste zaključili (glejte <<ch08-customizing-git#_git_hooks>>).
Na tej točki kdorkoli, ki lahko dostopa do spletnega strežnika, pod katerim ste dali repozitorij, lahko tudi klonira vaš repozitorij.
Da omogočite bralni dostop do vašega repozitorija preko HTTP, naredite nekaj takega:

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

To je vse.(((hooks, post-update)))
Kljuka `post-update`, ki prihaja privzeto z Gitom, požene ustrezni ukaz (`git update-server-info`), da naredi HTTP prenašanje in kloniranje ustrezno delujoče.
Ta ukaz se izvede, ko potisnete v ta repozitorij (morda preko SSH); nato lahko ostali ljudje klonirajo preko tega nekako takole:

[source,console]
----
$ git clone https://example.com/gitproject.git
----

V tem določenem primeru, uporabljamo pot `/var/www/htdocs`, ki je pogosta za nastavitve Apache, vendar lahko uporabite katerikoli statični spletni strežnik - v njegovo pot samo podajte goli repozitorij.
Podatki Git so ponujeni kot osnovne statične datoteke (za podrobnosti, kako točno je strežen, glejte poglavje <<ch10-git-internals#ch10-git-internals>>).

V splošnem bi bodisi izbrali, da se poganja bralno/pisalni strežnik s pametnim HTTP ali pa imate datoteke enostavno dostopne samo za branje v neumnem načinu.
Redko se poganja mešanica obeh storitev.

===== Prednosti

Osredotočili se bomo na prednosti pametne verzije protokola HTTP.

Enostavnost enega URL-ja za vse tipe dostopov in da strežnik poziva samo, ko je potrebna overitev, naredi stvari zelo enostavne za končnega uporabnika.
Možnost overitve z uporabniškim imenom in geslom je tudi velika prednost pred SSH, saj uporabnikom ni treba lokalno generirati ključev SSH in naložiti njihovih javnih ključev na strežnik, preden imajo lahko interakcijo z njim.
Za manj zahtevne uporabnike ali uporabnike na sistemih, kjer je SSH manj pogost, je to glavna prednost uporabnosti.
Protokol je tudi zelo hiter in učinkovit, podobno, kot je SSH.

Vaše repozitorije lahko ponudite preko HTTPS tudi samo za branje, kar pomeni, da lahko šifrirate vsebino prenosa; ali pa greste dalje in naredite, da odjemalci uporabljajo določene podpisane certifikate SSL.

Druga dobra stvar je, da sta HTTP in HTTPS tako pogosto uporabljena protokola, da so požarni zidovi podjetij pogostokrat nastavljeni, da omogočajo promet preko njunih vrat.

===== Slabosti

Git je lahko bolj zahteven za nastaviti preko HTTPS v primerjavi s SSH na nekaterih strežnikih.
Razen tega je zelo malo prednosti, ki jih imajo ostali protokoli preko pametnega protokola HTTP za strežbo Gita.

Če uporabljate HTTP za overitveno potiskanje, je zagotavljanje vaših poverilnic včasih bolj komplicirano kot uporaba ključev preko SSH.
Vendar so nekatera orodja predpomnjenja poverilnic, ki jih lahko uporabite, vključno z dostopom Keychain na macOS in Credential Manager na Windows, kar naredi to precej neboleče.
Preberite <<ch07-git-tools#_credential_caching>>, da si pogledate, kako nastaviti varno predpomnenje gesel HTTP na vašem sistemu.

==== Protokol SSH

(((protocols, SSH)))
Pogosti protokol prenosa za Git, ko ga gostujete sami, je preko SSH.
To je zato, ker je dostop SSH na strežnikih večinoma že nastavljen - in če ni, je to enostavno narediti.
SSH je tudi overitveni omrežni protokol in, ker je vseposoten, je v splošnem enostaven za nastaviti in uporabljati.

Da klonirate repozitorij Git preko SSH, lahko določite `ssh://` URL takole:

[source,console]
----
$ git clone ssh://[user@]server/project.git
----

Lahko pa uporabite kratko scp-podobno sintakso za protokol SSH:

[source,console]
----
$ git clone [user@]server:project.git
----

V obeh primerih zgoraj, če ne določite neobveznega uporabnika, Git predpostavlja, da gre za uporabnika, ki je trenutno prijavljen.

===== Prednosti

Prednosti za uporabo SSH je mnogo.
Najprej, SSH je relativno enostavno nastaviti - SSH prikriti procesi so pogosti, mnogi administratorji omrežij imajo z njimi izkušnje in mnoge distribucije OS so z njimi nastavljene ali pa imajo orodja za njihovo upravljanje.
Naslednje, dostop preko SSH je varen - vsi poslani podatki so šifrirani in overjeni.
Nazadnje, kot protokoli HTTPS, Git in lokalni protokol, je SSH učinkovit, kar naredi podatke pri prenašanju kompaktne, kolikor je možno.

===== Slabosti

Negativni pogled SSH-ja je, da ne podpira anonimnega dostopa do vašega repozitorija.
Če uporabljate SSH, _morajo_ imeti ljudje dostop do vaše naprave preko SSH, tudi samo v načinu za branje, kar SSH ne naredi prevodnega za odprtokodne projekte, kjer uporabniki želijo samo enostavno klonirati vaš repozitorij, da ga preučijo.
Če ga uporabljate samo znotraj vašega omrežja podjetja, je SSH lahko edini protokol, s katerim se boste morali ukvarjati.
Če želite dovoliti anonimen dostop samo za branje do vaših projektov in želite uporabljati tudi SSH, boste morali nastaviti SSH, da lahko potiskate preko njega, vendar nekaj drugega za ostale, da lahko prenašajo.

==== Protokol Git

(((protocols, git)))
Nazadnje je na voljo protokol Git.
To je posebni prikriti proces, ki prihaja v paketu Git; posluša na namenskih vratih (9418), kar ponuja storitev podobno kot protokol SSH, vendar absolutno brez vsakršnega overjanja ali šifriranja.
Da je lahko repozitorij postrežen preko protokola Git, morate ustvariti datoteko `git-daemon-export-ok` - prikriti proces ne bo stregel repozitorija brez te datoteke v njem - vendar razen tega ni nikakršne varnosti.
Bodisi je repozitorij Git na voljo za vsakogar za kloniranje, ali pa sploh ni.
To pomeni, da v splošnem ni nobenega potiskanja preko tega protokola.
Lahko omogočite dostop potiskanja; vendar bo manjkala overitev, kar pomeni, da kdorkoli na internetu, ki najde URL vašega projekta, lahko potisne v ta projekt.
Dovolj je reči, da je to redko.

===== Prednosti

Protokol Git je pogostokrat najhitrejši omrežni protokol, ki je na voljo.
Če ponujate veliko prometa za javni projekt ali strežete zelo velik projekt, ki ne zahteva uporabniškega overjanja za dostop branja, je verjetno, da boste želeli nastaviti prikriti proces Git, da streže vaš projekt.
Uporablja enak mehanizem prenosa podatkov kot protokol SSH, vendar brez režijskih stroškov šifriranja in overjanja.

===== Slabosti

Zaradi pomanjkanja TLS ali druge kriptografije lahko kloniranje prek `git://` privede do ranljivosti za izvajanje poljubnega kode, zato se mu izogibajte, razen če veste, kaj počnete.

* Če zaženete `git clone git://example.com/project.git`, lahko napadalec, ki nadzoruje vaš usmerjevalnik, spremeni pred kratkim kloniran repozitorij in vanj vstavi zlonamerno kodo. Če nato prevedete/zaženete kodo, ki ste jo pravkar klonirali, bo izvršena tudi zlonamerna koda.
  Zaradi istega razloga, se je treba izogibati tudi zagonu `git clone http://example.com/project.git`.
* Zagon `git clone https://example.com/project.git` nima take težave (razen če napadalec lahko zagotovi certifikat TLS za example.com).
  Zagon `git clone git@example.com:project.git` ima težavo samo, če sprejmete napačni ssh prstni odtis.

Git protokol tudi nima overitve, torej lahko repozitorij klonira kdorkoli (čeprav je to pogosto prav tisto, kar želite).
Poleg tega je najverjetneje najtežji protokol za nastavitev.
Zahteva svoj prikriti proces, kar zahteva konfiguracijo `xinetd`, `systemd` ali kaj podobnega, kar ni vedno preprosto.
Prav tako zahteva dostop do požarnega zidu na vratih 9418, ki niso standardna vrata, katera požarni zidovi podjetij vedno dovoljujejo.
Za velikimi požarnimi zidovi podjetij so ta neznana vrata pogosto blokirana.
