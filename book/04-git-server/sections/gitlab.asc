=== GitLab

(((serving repositories, GitLab)))(((GitLab)))
GitWeb je konec koncev precej enostaven.
Če iščete moderen strežnik Git s polno lastnostmi, je na voljo nekaj odprtokodnih rešitev, ki jih lahko namestite namesto tega.
Ker je GitLab eden izmed popularnejših, bomo kot primer šli skozi namestitev in uporabo.
To je nekoliko bolj kompleksno kot opcija GitWeb in bo zahtevalo več vzdrževanja, je pa polno opremljena opcija.

==== Namestitev

GitLab je spletna aplikacija podprta s podatkovno bazo, torej njegova namestitev vključuje nekoliko več vključevanja kot ostali strežniki Git.
Na srečo je ta proces zelo dobro dokumentiran in podprt.
GitLab močno priporoča namestitev GitLaba na vaš strežnik prek uradnega paketa Omnibus GitLab.

Druge možnosti namestitve so:

* GitLab Helm chart, za uporabo s Kubernetes.
* Dockerizirani paketi GitLab za uporabo z Dockerjem.
* Iz izvornih datotek.
* Ponudnik oblakov, kot so AWS, Google Cloud Platform, Azure, OpenShift in Digital Ocean.

Za več informacij preberite https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/README.md[GitLab Community Edition (CE) readme^].

==== Administracija

GitLabov administracijski vmesnik je dostopen preko spleta.
Enostavno pokažite vaš brskalnik na ime gostitelja ali naslov IP, kjer je GitLab nameščen, in se prijavite kot uporabnik admin.
Privzeto uporabniško ime je `admin@local.host` in privzeto geslo je `5iveL!fe` (katerega morate takoj spremeniti).
Ko se enkrat prijavite, kliknite na ikono "`Admin area`" v meniju desno zgoraj.

[[gitlab_menu]]
.Element "`Admin area`" v meniju GitLab
image::images/gitlab-menu.png[.Element "`Admin area`" v meniju GitLab]

===== Uporabniki

Vsakdo, ki uporablja strežnik GitLab, mora imeti uporabniški račun.
Uporabniški računi so precej preprosti, večinoma vsebujejo osebne informacije, ki so pripete k prijavnim podatkom.
Vsak uporabniški račun prihaja z *imenskim prostorom*, kar je logično grupiranje projektov, ki pripadajo temu uporabniku.
Če ima uporabnik +jane+ projekt imenovan +project+, je URL projekta `http://server/jane/project`.

[[gitlab_users]]
.Zaslon administracije uporabnika GitLab
image::images/gitlab-users.png[Zaslon administracije uporabnika GitLab]

Uporabnika se lahko odstrani na dva načina:
"`Blokiranje`" uporabnika prepreči prijavo v instanco GitLab, vendar bodo vsi podatki pod uporabniškim imenskim prostorom ohranjeni in potrditve poslane s tem uporabniškim e-naslovom bodo še vedno povezovale njegov profil.

"`Uničenje`" uporabnika po drugi strani v celoti odstrani uporabnika iz podatkovne baze in datotečnega sistema.
Vsi projekti in podatki v imenskem prostoru uporabnika in katerekoli skupine, ki jih imajo v lasti, bodo tudi odstranjeni.
To je očitno veliko bolj dokončna in destruktivna akcija ter njene uporabe so redke.

[[_gitlab_groups_section]]
===== Skupine

Skupina GitLab je zbirka projektov skupaj s podatki o tem, kako lahko uporabniki dostopajo do teh projektov.
Vsaka skupina ima imenski prostor projekta (enako, kakor imajo to uporabniki), torej če ima skupina +training+ projekt +materials+, bi bil njen URL `http://server/training/materials`.

[[gitlab_groups]]
.Administracijski zaslon skupin GitLab
image::images/gitlab-groups.png[Administracijski zaslon skupin GitLab]

Vsaka skupina je povezana s številom uporabnikov, vsak od njih ima nivo pravic za skupinske projekte in samo skupino.
To obsega vse od "`Guest`" (samo težave in pogovor) do "`Owner`" (poln nadzor nad skupino, njenimi člani in njenimi projekti).
Tipi pravic so preveč številni za izpisati tukaj, vendar GitLab ima na administracijskem zaslonu koristno povezavo.

===== Projekti

Projekt GitLab približno ustreza enemu repozitoriju Git.
Vsak projekt pripada enemu imenskemu prostoru, bodisi uporabnika ali skupine.
Če projekt pripada uporabniku, ima lastnik projekta direkten nadzor nad tem, kdo ima dostop do projekta; če projekt pripada skupini, potem bodo imele učinek tudi pravice skupinskega nivoja uporabnika.

Vsak projekt ima tudi nivo vidnosti, kar nadzira, kdo ima dostop za branje do strani in repozitorijev tega projekta.
Če je projekt _zaseben_, mora lastnik projekta eksplicitno odobriti dostop določenim uporabnikom.
_Interni_ projekt je viden kateremukoli prijavljenem uporabniku in _javni_ projekt je viden komurkoli.
Bodite pozorni, saj to nadzira tako dostop `git fetch` kot tudi dostop do spletnega uporabniškega vmesnika za ta projekt.

===== Kljuke

GitLab vključuje podporo za kljuke tako na projektnem kot na sistemskem nivoju.
Za katerokoli od teh bo strežnik GitLab izvedel HTTP POST z nekim opisnim JSON, kadarkoli se zgodi relevanten dogodek.
To je odličen način za povezavo vaših repozitorijev Git in instanco GitLab z vašo preostalo avtomatizacijo, kot je strežnik CI, pogovorne sobe ali nalagalna orodja.

==== Osnovna uporaba

Prva stvar, ki jo boste z GitLabom želeli narediti, je ustvariti nov projekt.
To se doseže s klikom na ikono "`+`" na orodni vrstici.
Vprašani boste za ime projekta, kateremu imenskemu prostoru naj bi pripadal in kakšen nivo vidnosti bi moral imeti.
Večino, česar določite tu, ni dokončno in se lahko ponovno prilagodi kasneje skozi vmesnik nastavitev.
Kliknite na "`Create Project`" in ste opravili.

Enkrat, ko projekt obstaja, ga boste verjetno želeli povezati z lokalnim repozitorijem Git.
Vsak projekt je dostopen preko HTTPS ali SSH, katerikoli od teh se lahko uporabi za nastavitev daljave Git.
URL-ji so vidni na vrhu domače strani projekta.
Za obstoječe lokalne repozitorije ta ukaz ustvari daljavo imenovano `gitlab` h gostovani lokaciji:

[source,console]
----
$ git remote add gitlab https://server/namespace/project.git
----

Če nimate lokalne kopije repozitorija, lahko enostavno naredite sledeče:

[source,console]
----
$ git clone https://server/namespace/project.git
----

Spletni UI ponuja dostop do mnogih uporabnih pogledov samega repozitorija.
Vsaka domača stran projekta prikazuje zadnjo aktivnost in povezave na vrhu vas bodo peljale do pogledov projektnih datotek in dnevnika potrjevanja.

==== Skupno delo

Najenostavnejši način skupnega dela na projektu GitLab je dati drugemu uporabniku direktne pravice potiskanja v repozitorij Git.
Projektu lahko dodate uporabnika tako, da greste v sekcijo "`Members`" nastavitev tega projekta in povežete novega uporabnika z nivojem dostopa (različni nivoji dostopa so predebatirani nekoliko v <<_gitlab_groups_section>>).
Z dajanjem uporabniku nivo dostopa "`Developer`" ali več, lahko ta uporabnik potiska potrditve in veje direktno v repozitorij.

Drug bolj razvezan način sodelovanja je z uporabo zahtevkov združevanja.
Ta lastnost omogoča na nadziran način, da katerikoli uporabnik vidi projekt za sodelovanje.
Uporabniki z direktnim dostopom lahko enostavno ustvarijo vejo, vanjo potisnejo potrditve in odprejo zahtevek združevanja iz njihove veje nazaj v `master` ali katerokoli drugo vejo.
Uporabniki, ki nimajo pravic potiskanja za repozitorij lahko naredijo t.i. "`fork`" in ustvarijo njihovo lastno kopijo, pošljejo potrditve v _njihovo_ kopijo in odprejo zahtevek združevanja iz njihovega forka nazaj v glavni projekt.
Ta model omogoča lastniku, da ima polno kontrolo nad tem, kaj gre v repozitorij in kdaj, medtem ko omogoča sodelovanje z nezaupanimi uporabniki.

Zahtevki združevanja in težave so glavne enote dolgo živečih diskusij v GitLabu.
Vsak zahtevek združevanja omogoča debato po vrsticah predlagane spremembe (kar podpira enostaven način pregleda kode), kot tudi splošno skupno nit diskusije.
Oboje se lahko določi uporabniku ali organizira v mejnike.

Ta sekcija je osredotočena v glavnem na lastnosti GitLaba povezane z Gitom, vendar kot zrel projekt ponuja mnoge ostale lastnosti, ki pomagajo vaši ekipi, da dela skupaj, kot so projektni wikiji in orodja vzdrževanja sistema.
Ena izmed koristi GitLaba je ta, da ko je enkrat strežnik nastavljen in v pogonu, boste redko potrebovali prilagoditi nastavitveno datoteko ali dostop do strežnika preko SSH; večino administracije in splošne uporabe se lahko doseže preko vmesnika znotraj brskalnika.
