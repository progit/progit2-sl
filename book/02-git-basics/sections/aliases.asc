[[_git_aliases]]
=== Aliasi Git

(((aliases)))
Preden gremo na naslednje poglavje, želimo predstaviti lastnost, ki lahko naredi vašo izkušnjo Git enostavnejšo, lažjo in bolj znano: aliasi.
Zaradi jasnosti se ne bomo več sklicevali nanje kasneje v knjigi, vendar bi verjetno morali vedeti, kako jih uporabljati, če boste Git redno uporabljali.

Git ne sklepa avtomatsko na podlagi vašega ukaza, če ga vpišete le delno.
Če ne želite vpisovati celotnega teksta vsakega ukaza Git, lahko enostavno nastavite alias za vsak ukaz z uporabo `git config`. (((git commands, config)))
Tu je nekaj primerov, ki jih morda želite nastaviti:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

To pomeni, da na primer namesto, da vpisujete `git commit`, lahko vpišete zgolj `git ci`.
Ko nadaljujete z uporabo Gita, boste verjetno pogosto uporabljali tudi ostale ukaze; ne odlašajte z izdelavo novih aliasov.

Ta tehnika je lahko zelo uporabna pri izdelavi ukazov, za katere smatrate, da bi morali obstajati.
Na primer, da popravite uporabnost problema, na katerega ste naleteli z dajanjem datoteke izven področja priprave, lahko Gitu dodate svoj alias za dajanje izven priprave:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

To naredi sledeča ukaza enakovredna temu:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

To izgleda bolj jasno.
Pogosto se doda tudi ukaz `last` sledeče:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Na ta način lahko enostavneje pogledate zadnjo potrditev:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    Test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Kot lahko vidite, Git enostavno zamenja novi ukaz s čimer koli, za kar mu zanj nastavite alias.
Vendar morda boste želeli pognati zunanji ukaz namesto podukaza Git.
V tem primeru začnete ukaz z znakom `!`.
To je uporabno, če pišete vaša lastna orodja, ki delajo z repozitorijem Git.
Demonstriramo lahko dodajanje aliasa `git visual`, ki požene `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
