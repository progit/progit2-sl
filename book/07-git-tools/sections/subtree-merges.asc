[[_subtree_merge]]
===== Združevanje poddreves

Ideja združevanja poddreves (ang. subtree merge) je, da imate dva projekta in eden izmed projektov je preslikan v poddirektorij drugega.
Ko določite združitev poddreves, je Git pogostokrat dovolj pameten, da ugotovi, da je eno poddrevo drugega in ju ustrezno združi.

Šli bomo skozi primer dodajanja ločenega projekta v obstoječi projekt in nato združili kodo drugega v poddirektorij prvega.

Najprej bomo v naš projekt dodali aplikacijo Rack.
Dodali bomo projekt Rack kot oddaljeno referenco v našem lastnem projektu in ga nato izpisali v svojo lastno vejo:

[source,console]
----
$ git remote add rack_remote https://github.com/rack/rack
$ git fetch rack_remote --no-tags
warning: no common commits
remote: Counting objects: 3184, done.
remote: Compressing objects: 100% (1465/1465), done.
remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.
Resolving deltas: 100% (1952/1952), done.
From https://github.com/rack/rack
 * [new branch]      build      -> rack_remote/build
 * [new branch]      master     -> rack_remote/master
 * [new branch]      rack-0.4   -> rack_remote/rack-0.4
 * [new branch]      rack-0.9   -> rack_remote/rack-0.9
$ git checkout -b rack_branch rack_remote/master
Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master.
Switched to a new branch "rack_branch"
----

Sedaj imamo vrh projekta Rack v naši veji `rack_branch` in naš lastni projekt v veji `master`.
Če izpišete enega in nato drugega, lahko vidite, da imata različna vrha projektov:

[source,console]
----
$ ls
AUTHORS         KNOWN-ISSUES   Rakefile      contrib         lib
COPYING         README         bin           example         test
$ git checkout master
Switched to branch "master"
$ ls
README
----

To je nekako čuden koncept.
Ni potrebno, da so vse veje v vašem repozitoriju dejansko veje istega projekta.
Ni pogosto, saj je redkokdaj koristno, vendar je precej enostavno imeti veje, ki vsebujejo popolnoma različne zgodovine.

V tem primeru želimo povleči projekt Rack v naš projekt `master` kot poddirektorij.
To lahko naredimo v Gitu z `git read-tree`.
Več o `read-tree` in njegovih prijateljih se boste naučili v <<ch10-git-internals#ch10-git-internals>>, vendar za sedaj vedite, da prebere vrh drevesa ene veje v vaše trenutno področje priprave in delujoči direktorij.
Smo ravno preklopili nazaj na vašo vejo `master` in povlečemo vejo `rack_branch` v poddirektorij `rack` naše veje `master` našega glavnega projekta:

[source,console]
----
$ git read-tree --prefix=rack/ -u rack_branch
----

Ko naredimo potrditev, izgleda kot da imamo vse datoteke Rack pod tem poddirektorijem - kakor da bi jih kopirali iz tarballa.
Kar postane zanimivo, je, da lahko precej enostavno združimo spremembe iz ene veje v drugo.
Torej, če se projekt Rack posodobi, lahko povlečemo zgornje spremembe s preklopom na tisto vejo in povlekom:

[source,console]
----
$ git checkout rack_branch
$ git pull
----

Nato lahko združimo te spremembe nazaj v našo vejo `master`.
Da povlečemo spremembe in vnaprej napolnimo sporočilo potrditve, uporabimo možnost `--squash` kot tudi rekurzivno združevanje strategije možnosti `-Xsubtree`.
Rekurzivna strategija je tu privzeta, vendar jo dodajamo zaradi večje jasnosti.

[source,console]
----
$ git checkout master
$ git merge --squash -s recursive -Xsubtree=rack rack_branch
Squash commit -- not updating HEAD
Automatic merge went well; stopped before committing as requested
----

Vse spremembe iz projekta Rack so združene in pripravljene za lokalno potrditev.
Lahko naredite tudi nasprotno - naredite spremembe v poddirektoriju `rack` vaše veje `master` in jih nato kasneje združite v vašo vejo `rack_branch`, da jih pošljete vzdrževalcem ali potisnete navzgor.

To nam da način, da imamo potek dela, ki je nekako podoben tistemu s podmoduli, le brez uporabe podmudolov (kar bomo pokrili v <<ch07-git-tools#_git_submodules>>).
Obdržimo lahko veje z ostalimi povezanimi projekti v našem repozitoriju in jih občasno poddrevesno združimo v naš projekt.
Na nek način je dobro, na primer, da je vsa koda potrjena na enem mestu.
Vendar ima ostale slabosti v tem, da je malo bolj kompleksno in hitro se naredi napake pri ponovnem integriranju sprememb, ali pa se po nesreči potisne vejo v nepovezani repozitorij.

Druga nekoliko čudna stvar je, da za dobiti razliko med tem, kar imate v vašem poddirektoriju `rack` in kodi v vaši veji `rack_branch` - da vidite, če jih potrebujete združiti - ne morete uporabiti običajnega ukaza `diff`.
Namesto tega morate pognati `git diff-tree` z vejo, ki jo želite primerjati:

[source,console]
----
$ git diff-tree -p rack_branch
----

Za primerjati, kaj je v vašem poddirektoriju `rack` s tem, kakšna je bila veja `master` na strežniku nazadnje, ko ste prenašali, lahko poženete:

[source,console]
----
$ git diff-tree -p rack_remote/master
----
