[[_first_time]]
=== Prva nastavitev Gita

Sedaj, ko imate Git na vašem sistemu, boste želeli postoriti nekaj stvari, da prilagodite svoje okolje Git.
Te stvari bi morali narediti samo enkrat na katerem koli danem računalniku; ohranile se bodo med nadgradnjami.
Lahko jih tudi kadarkoli spremenite s ponovnim pogonom ukazov.

Git prihaja z orodjem imenovanim `git config`, ki vam omogoča dobiti in nastaviti konfiguracijske spremenljivke, ki krmilijo vse vidike, kako je Git videti in kako deluje.(((git commands, config)))
Te spremenljivke so lahko shranjene na treh različnih mestih:

1. `[path]/etc/gitconfig` datoteka: Vsebuje vrednosti za vsakega uporabnika na sistemu in vse njegove repozitorije.
  Če podate opcijo `--system` h `git config`, bere in piše iz te datoteke posebej.
  Ker je to sistemska nastavitvena datoteka, boste za njene spremembe potrebovali administrativne ali naduporabniške pravice.
2. `~/.gitconfig` ali `~/.config/git/config` datoteka: Določa vrednosti specifično za vas kot uporabnika.
  Git lahko naredite, da bere in piše v to datoteko posebej z dodajanjem opcije `--global` in to vpliva na _vse_ repozitorije, s katerimi delate na svojem sistemu.
3. Datoteka `config` v direktoriju Git (to je, `.git/config`) kateregakoli repozitorija, ki ga trenutno uporabljate: Specifičnega je temu posameznemu repozitoriju.
  Git lahko prisilite, da bere iz ali piše v to datoteko z možnostjo `--local`, ki je pa tudi privzeta možnost.
  Ni presenetljivo, da morate biti nekje v repozitoriju Git, da ta možnost pravilno deluje.

Vsak nivo prepiše vrednosti iz prejšnjega nivoja, tako, da so vrednosti v `.git/config` adut tistim v `[path]/etc/gitconfig`.

Na sistemih Windows Git poišče datoteko `.gitconfig` v direktoriju `$HOME` (`C:\Users\$USER` za večino ljudi).
Še vedno tudi pogleda v `[path]/etc/gitconfig`, čeprav je ta pot relativna glede na vrhovni direktorij MSys, ki se nahaja, kjerkoli se odločite namestiti Git na vašem sistemu Windows, ko poženete namestitveni program.
Če poganjate verzijo Git 2.x ali novejšo za Windows, je na voljo tudi nastavitvena datoteka sistemskega nivoja v `C:\Documents and Settings\All Users\Application Data\Git\config` na sistemu Windows XP oz. `C:\ProgramData\Git\config` na sistemu Windows Vista in novejših različicah.
To nastavitveno datoteko se lahko spremeni samo z `git config -f <file>` kot administrator.

Vse vaše nastavitve in od kod prihajajo, lahko pogledate z uporabo:

[source,console]
----
$ git config --list --show-origin
----

==== Vaša identiteta

Prva stvar, ki bi jo morali narediti, ko nameščate Git, je nastaviti vaše uporabniško ime in naslov e-pošte.
To je pomembno, ker vsaka Git potrditev uporablja te informacije in so nespremenljivo zapečene v potrditev, ki ste jo začeli ustvarjati:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

To morate narediti samo enkrat, če podate možnost `--global`, ker bo Git vedno uporabil te informacije, za karkoli boste naredili na tem sistemu.
Če želite prepisati to z različnim imenom ali naslovom e-pošte za posamezne projekte, lahko poženete ukaz brez opcije `--global`, ko ste v tem projektu.

Mnogo orodij GUI vam bo to pomagalo narediti, ko jih prvič uporabite.

[[_editor]]
==== Vaš urejevalnik

Sedaj, ko je vaša identiteta nastavljena, lahko nastavite privzeti tekstovni urejevalnik, ki bo uporabljen, ko Git pričakuje, da vpišete sporočilo.
Če to ni nastavljeno, bo Git uporabljal vaš privzeti urejevalnik sistema.

Če želite uporabiti drug urejevalnik, kot je Emacs, lahko to naredite na naslednji način:

[source,console]
----
$ git config --global core.editor emacs
----

Če želite uporabljati drug urejevalnik besedil na sistemu Windows, morate navesti polno pot do njegove izvršne datoteke.
To se lahko razlikuje glede na to, kako je urejevalnik zapakiran.

V primeru Notepad++, priljubljenega programerskega urejevalnika, želite verjetno uporabiti 32-bitno različico, saj v času pisanja 64-bitna različica ne podpira vseh vtičnikov.
Če ste na 32-bitnem sistemu Windows, ali imate 64-bitni urejevalnik na 64-bitnem sistemu, boste vpisali nekaj takega:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim, Emacs in Notepad++ so popularni urejevalniki besedil pogosto uporabljeni s strani razvijalcev na sistemih osnovanih na Unixu, kot sta Linux in macOS ali na sistemu Windows.
Če uporabljate drug urejevalnik ali 32-bitno različico, prosimo, poiščite specifična navodila, kako nastaviti vaš priljubljeni urejevalnik z Gitom v <<C-git-commands#ch_core_editor>>.
====

[WARNING]
====
Če urejevalnika ne nastavite na ta način, se lahko znajdete v zelo zmedenem stanju, ko Git poskuša zagnati urejevalnik.
Primer na sistemu Windows lahko vključuje prezgodaj prekinjeno Git operacijo med urejanjem, ki ga je sprožil Git.
====

[[_new_default_branch]]
==== Vaše privzeto ime veje

Git privzeto ustvari vejo, imenovano _master_, ko ustvarite nov repozitorij z `git init`.
Od različice Git 2.28 naprej lahko nastavite drugačno ime za začetno vejo.

Da nastavite privzeto ime veje _main_, naredite:

[source,console]
----
$ git config --global init.defaultBranch main
----

==== Preverjanje vaših nastavitev

Če želite preveriti svoje nastavitve, lahko uporabite ukaz `git config --list` za izpis vseh nastavitev, ki jih lahko Git najde v tistem trenutku:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Lahko boste videli ključe več kot enkrat, ker Git prebere isti ključ iz različnih datotek (na primer, `[path]/etc/gitconfig` in `~/.gitconfig`).
V tem primeru Git uporablja zadnjo vrednost za vsak unikaten ključ, ki ga vidi.

Lahko tudi preverite, kaj Git razmišlja o določeni vrednosti ključa z vpisom `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Ker lahko Git prebere isto vrednost konfiguracijske spremenljivke iz več datotek, je mogoče, da imate nepričakovano vrednost za eno od teh vrednosti in ne veste, zakaj.
V takšnih primerih lahko Git vprašate po izvoru te vrednosti in povedal vam bo, katera konfiguracijska datoteka je imela zadnjo besedo pri določanju te vrednosti:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
