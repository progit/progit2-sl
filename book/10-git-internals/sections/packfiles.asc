=== Packfiles

Če ste sledili vsem navodilom v primeru iz prejšnjega odseka, bi morali imeti zdaj testni repozitorij Git z 11 objekti - štirimi blobi, tremi drevesi, tremi potrditvami in eno oznako:

[source,console]
----
$ find .git/objects -type f
.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
.git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag
.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1
----

Git stisne vsebine teh datotek z zlibom, ker ne hranite veliko, zato skupaj zavzemajo le 925 bajtov.
Sedaj boste v repozitorij dodali nekaj večjih vsebin, da boste prikazali zanimivo lastnost Gita.
Za prikaz bomo dodali datoteko `repo.rb` iz knjižnice Grit - to je približno 22 K velika datoteka s kodo:

[source,console]
----
$ curl https://raw.githubusercontent.com/mojombo/grit/master/lib/grit/repo.rb > repo.rb
$ git checkout master
$ git add repo.rb
$ git commit -m 'Create repo.rb'
[master 484a592] Create repo.rb
 3 files changed, 709 insertions(+), 2 deletions(-)
 delete mode 100644 bak/test.txt
 create mode 100644 repo.rb
 rewrite test.txt (100%)
----

Če si ogledate izhajajoče drevo, lahko vidite vrednost SHA-1, ki je bila izračunana za vaš novi blob objekt `repo.rb`:

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5      repo.rb
100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt
----

Nato lahko uporabite `git cat-file`, da vidite, kako velik je ta objekt:

[source,console]
----
$ git cat-file -s 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5
22044
----

V tem trenutku malo spremenite datoteko in poglejte, kaj se zgodi:

[source,console]
----
$ echo '# testing' >> repo.rb
$ git commit -am 'Modify repo.rb a bit'
[master 2431da6] Modify repo.rb a bit
 1 file changed, 1 insertion(+)
----

Preverite drevo, ki je bilo ustvarjeno s to zadnjo potrditvijo, in videli boste nekaj zanimivega:

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob b042a60ef7dff760008df33cee372b945b6e884e      repo.rb
100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt
----

Blob je zdaj drugačen blob, kar pomeni, da je Git kljub temu, da ste dodali samo eno vrstico na konec 400-vrstične datoteke, to novo vsebino shranil kot popolnoma nov objekt:

[source,console]
----
$ git cat-file -s b042a60ef7dff760008df33cee372b945b6e884e
22054
----

Na svojem disku imate dva skoraj enaka 22 K objekta (vsak stisnjen na približno 7 K).
Ne bi bilo lepo, če bi Git lahko shranil enega od njiju v celoti, drugi objekt pa le kot razliko med njim in prvim?

Izkaže se, da to lahko stori.
Izvirni format, v katerem Git shrani objekte na disku, se imenuje format »loose«.
Vendar pa Git včasih več teh objektov zapakira v eno binarno datoteko, imenovano »packfile«, da prihrani prostor in je bolj učinkovit.
Git to naredi, če imate okoli preveč ohlapnih objektov, ko ročno zaženete ukaz `git gc`, ali če objekte potisnete na oddaljen strežnik.
Da vidite, kaj se zgodi, lahko Git ročno zaprosite, da zapakira objekte s klicem ukaza `git gc`:

[source,console]
----
$ git gc
Counting objects: 18, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (14/14), done.
Writing objects: 100% (18/18), done.
Total 18 (delta 3), reused 0 (delta 0)
----

Če pogledate v svoj direktorij `objects`, boste ugotovili, da je večina vaših objektov izginila in pojavil se je nov par datotek:

[source,console]
----
$ find .git/objects -type f
.git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
.git/objects/info/packs
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack
----

Objekti, ki ostanejo, so blobi, na katere ne kaže nobena potrditev - v tem primeru bloba »what is up, doc?« in »test content«, ki ste ju ustvarili prej.
Ker jih nikoli niste dodali k nobeni potrditvi, se štejejo za viseče in niso zapakirani v vaši novi packfile.

Druge datoteke sta vaša nova packfile in indeks.
Datoteka zmanjšanih podatkov (packfile) je ena sama datoteka, ki vsebuje vsebino vseh predmetov, ki so bili odstranjeni iz vašega datotečnega sistema.
Indeks je datoteka, ki vsebuje zamike v tej zmanjšani datoteki, da lahko hitro poiščete določen predmet.
Kar je odlično, je to, da čeprav so predmeti na disku pred zagonom ukaza `gc` zavzemali približno 15 K v velikosti, nova zmanjšana datoteka zavzema samo 7 K.
Zmanjšali ste uporabo diska za polovico s pakiranjem svojih predmetov.

Kako Git to naredi?
Ko Git pakira predmete, išče datoteke, ki so podobne po imenu in velikosti, in shranjuje samo delte od ene različice datoteke do naslednje.
Ogledate si lahko datoteko packfile in vidite, kaj je Git naredil, da bi prihranil prostor.
Ukaz napeljave `git verify-pack` vam omogoča, da si ogledate, kaj je bilo zapakirano:

[source,console]
----
$ git verify-pack -v .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx
2431da676938450a4d72e260db3bf7b0f587bbc1 commit 223 155 12
69bcdaff5328278ab1c0812ce0e07fa7d26a96d7 commit 214 152 167
80d02664cb23ed55b226516648c7ad5d0a3deb90 commit 214 145 319
43168a18b7613d1281e5560855a83eb8fde3d687 commit 213 146 464
092917823486a802e94d727c820a9024e14a1fc2 commit 214 146 610
702470739ce72005e2edff522fde85d52a65df9b commit 165 118 756
d368d0ac0678cbe6cce505be58126d3526706e54 tag    130 122 874
fe879577cb8cffcdf25441725141e310dd7d239b tree   136 136 996
d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree   36 46 1132
deef2e1b793907545e50a2ea2ddb5ba6c58c4506 tree   136 136 1178
d982c7cb2c2a972ee391a85da481fc1f9127a01d tree   6 17 1314 1 \
  deef2e1b793907545e50a2ea2ddb5ba6c58c4506
3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree   8 19 1331 1 \
  deef2e1b793907545e50a2ea2ddb5ba6c58c4506
0155eb4229851634a0f03eb265b69f5a2d56f341 tree   71 76 1350
83baae61804e65cc73a7201a7252750c76066a30 blob   10 19 1426
fa49b077972391ad58037050f2a75f74e3671e92 blob   9 18 1445
b042a60ef7dff760008df33cee372b945b6e884e blob   22054 5799 1463
033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   9 20 7262 1 \
  b042a60ef7dff760008df33cee372b945b6e884e
1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob   10 19 7282
non delta: 15 objects
chain length = 1: 3 objects
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack: ok
----

Tukaj se blob `033b4`, ki ste si ga zapomnili kot prvo različico vaše datoteke `repo.rb`, sklicuje na blob `b042a`, ki je bila druga različica datoteke.
Tretji stolpec v izpisu je velikost predmeta v paketu, tako da lahko vidite, da `b042a` zavzema 22 K datoteke, `033b4` pa le 9 bajtov.
Kar je prav tako zanimivo, je, da je druga različica datoteke shranjena kot nedotaknjena, medtem ko je prvotna različica shranjena kot delta - to je zato, ker boste najverjetneje potrebovali hitrejši dostop do najnovejše različice datoteke.

Res dobra stvar pri tem je, da se lahko kadarkoli znova zapakira.
Git bo samodejno znova zapakiral vašo zbirko podatkov, vedno poskušal prihraniti več prostora, vendar lahko kadarkoli ročno znova zapakirate z zagonom ukaza `git gc`.
