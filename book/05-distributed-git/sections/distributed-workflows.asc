=== Porazdeljeni poteki dela

(((workflows)))
Z razliko od centraliziranih sistemov za nadzor različic (CVCS-ji), vam narava porazdelitve Gita omogoča, da ste veliko bolj fleksibilni v tem, kako razvijalci sodelujejo na projektih.
V centraliziranih sistemih je vsak razvijalec vozlišče, ki deluje več ali manj enako s centralnim razdelilnikom.
Vendar v Gitu je vsak razvijalec potencialno tako vozlišče kot razdelilnik; to pomeni, da lahko vsak razvijalec tako prispeva kodo k drugim repozitorijem, kot tudi vzdržuje javen repozitorij, na katerem lahko ostali osnujejo svoje delo in h katerem lahko prispevajo.
To odpira širok spekter zmožnosti poteka dela za vaš projekt in/ali vašo ekipo, torej bomo pokrili nekaj pogostih paradigm, ki izkoriščajo to fleksibilnost.
Šli bomo skozi prednosti in možne slabosti vsakega modela; za uporabo lahko izberete kateregakoli ali pa jih mešate in vzamete lastnosti iz vsakega.

==== Centraliziran potek dela

(((workflows, centralized)))
V centraliziranih sistemih je v splošnem en model sodelovanja - centralizirani potek dela.
En centralni razdelilnik ali _repozitorij_ lahko sprejme kodo in vsakdor sinhronizira svoje delo z njim.
Število razvijalcev so vozlišča - uporabniki tega razdelilnika - in sinhronizirajo s to centralno lokacijo.

.Centralizirani potek dela
image::images/centralized_workflow.png[Centralizirani potek dela]

To pomeni, da če dva razvijalca klonirata iz razdelilnika in oba naredita spremembe, bo prvi razvijalec, ki potisne svoje spremembe nazaj gor, lahko to naredil brez težav.
Drugi razvijalec mora združiti delo prvega, preden potisne spremembe gor, tako da ne prepiše sprememb prvega razvijalca.
Ta koncept je veljaven tako v Gitu kot tudi v Subversionu(((Subversion))) (ali kateremkoli drugem CVCS-ju) in ta model deluje v Gitu odlično.

Če ste že domači s centraliziranim potekom dela v vašem podjetju ali ekipi, lahko enostavno nadaljujete z uporabo tega poteka dela v Gitu.
Enostavno nastavite repozitorij in dajte vsakomur v vaši ekipi dostop potiskanja; Git ne bo dovolil uporabnikom prepisati drug drugega.

Recimo, da John in Jessica oba začneta delati istočasno.
John konča svoje spremembe in jih potisne na strežnik.
Nato poskuša Jessica potisniti svoje spremembe, vendar jih strežnik zavrne.
Povedano ji je, da poskuša potisniti t.i. non-fast-forward spremembe in da tega ne bo mogla napraviti, dokler ne prenese in združi.
Ta potek dela je atraktiven za veliko ljudi, ker je paradigma, s katero so mnogi seznanjeni in domači.

To tudi ni omejeno na majhne ekipe.
Z modelom razvejanja Git je možno, da na stotine razvijalcev uspešno dela na enem projektu skozi ducat vej istočasno.

[[_integration_manager]]
==== Potek dela s povezovalnim upraviteljem

(((workflows, integration manager)))
Ker vam Git omogoča imeti več oddaljenih repozitorijev, je možno imeti potek dela, kjer ima vsak razvijalec dostop za pisanje na svojem lastnem javnem repozitoriju in dostop za branje na vseh ostalih.
Ta scenarij pogostokrat vključuje kanonični repozitorij, ki predstavlja "`uradni`" projekt.
Da prispevate temu projektu, ustvarite vaš lastni javni klon projekta in vanj potisnete vaše spremembe.
Nato lahko vzdrževalcu glavnega projekta pošljete zahtevek, da povleče vaše spremembe.
Vzdrževalec lahko nato doda vaš repozitorij kot daljavo, testira vaše spremembe lokalno, jih združi v svojo vejo in potisne nazaj v svoj repozitorij.
Proces deluje sledeče (glejte <<wfdiag_b>>):

1.  Vzdrževalec projekta potisne v svoj javni repozitorij.
2.  Prispevalec klonira ta repozitorij in naredi spremembe.
3.  Prispevalec potisne v svojo lastno kopijo.
4.  Prispevalec pošlje vzdrževalcu e-pošto, kjer ga prosi, da povleče spremembe.
5.  Vzdrževalec doda repozitorij prispevalca kot daljavo in združi lokalno.
6.  Vzdrževalec potisne združene spremembe v glavni repozitorij.

[[wfdiag_b]]
.Potek dela s povezovalnim upraviteljem
image::images/integration-manager.png[Potek dela s povezovalnim upraviteljem]

(((forking)))
To je zelo pogost potek dela z orodji, ki so osnovana na razdelilnikih, kot sta GitHub ali GitLab, kjer je enostavno razvejiti projekt in potisniti vaše spremembe v vašo razvejitev, da jih vsakdo vidi.
Ena glavnih prednosti tega pristopa je, da lahko nadaljujete delo in vzdrževalec glavnega repozitorija lahko kadarkoli povleče vaše spremembe.
Sodelavcem ni treba čakati, da projekt vključi njihove spremembe - vsaka stran lahko dela po svojem lastnem ritmu.

==== Potek dela z diktatorji in poročniki

(((workflows, dictator and lieutenants)))
To je različica poteka dela z večimi repozitoriji.
V splošnem je uporabljena na velikih projektih s stotinami sodelavcev; eden znanih primerov je jedro Linux.
Različni upravitelji integracij so zadolženi za določene dele repozitorija; imenujejo se _poročniki_.
Vsi poročniki imajo enega upravitelja integracije znanega kot dobronamerni diktator.
Dobronamerni diktator potisne iz svojega direktorija na referenčni repozitorij, iz katerega morajo vsi sodelavci povleči.
Proces deluje takole (glejte <<wfdiag_c>>):

1.  Splošni razvijalci delajo na svojih tematskih vejah in ponovno bazirajo svoje delo glede na `master`.
    Veja `master` je veja referenčnega repozitorija, na katerega diktator potiska.
2.  Poročniki združijo razvijalčeve tematske veje v svojo vejo `master`.
3.  Diktator združi poročnikove veje `master` v diktatorjevo vejo `master`.
4.  Diktator potisne to vejo `master` v referenčni repozitorij, da lahko ostali razvijalci ponovno bazirajo na njem.

[[wfdiag_c]]
.Potek dela z dobronamernim diktatorjem
image::images/benevolent-dictator.png[Potek dela z dobronamernim diktatorjem]

Taka vrsta poteka dela ni pogosta, vendar je lahko uporabna v zelo velikih projektih ali v visoko hierarhičnih okoljih.
Vodji projekta (diktatorju) omogoča delegirati večino dela in zbrati velike skupke kode na večih točkah, preden jih integrira.

[[_patterns_for_managing_source_code_branches]]
==== Vzorci za upravljanje vej izvorne kode

[NOTE]
====
Martin Fowler je ustvaril vodnik "Patterns for Managing Source Code Branches".
Ta vodnik pokriva vse pogoste poteke dela Git in jih razloži, kako in kdaj jih uporabiti.
Na voljo je tudi razdelek, ki primerja visoke in nizke integracijske frekvence.

https://martinfowler.com/articles/branching-patterns.html[^]
====

==== Povzetek potekov dela

To so nekateri pogosto uporabljeni poteki dela, ki so možni v porazdeljenih sistemih, kot je Git, vendar vidite lahko, da so možne mnoge različice, ki ustrezajo vašemu določenemu resničnemu poteku dela.
Sedaj, ko lahko (upajmo) določite, katera kombinacija poteka dela lahko deluje za vas, bomo pokrili nekaj določenih primerov, kako doseči glavne vloge, ki naredijo različne poteke.
V naslednjem razdelku se boste naučili o nekaterih pogostih vzorcih prispevanja projektu.
