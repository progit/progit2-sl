=== Grafični vmesniki

(((GUIs)))(((Graphical tools)))
Git domače okolje je terminal.
Nove lastnosti se najprej pojavijo tam in samo ukazna vrstica je polna moč Gita na razpolago v celoti.
Vendar osnovni tekst ni najboljša izbira za vsa opravila; včasih je vizualna predstavitev to, kar potrebujete in nakaterim uporabnikom veliko bolj ustreza vmesnik pokaži in klikni.

Pomembno je omeniti, da so razlike med vmesniki prilagojene za različne poteke dela.
Nekateri klienti izpostavijo samo skrbno kurirane podsklope funkcionalnosti Git, da podpirajo določen način dela, ki ga avtor smatra za efektivnega.
Ko se to pogleda v tej luči, ne more biti nobeno izmed teh orodij poimenovano kot "`boljše`" od ostalih, saj so enostavno samo prilagojeni njihovim predvidenim namenom.
Pomnite tudi, da v teh grafičnih klientih ni ničesar, kar klient ukazne vrstice ne more narediti; ukazna vrstica je še vedno mesto, kjer boste imeli največ moči in kontrole, ko delate z vašimi repozitoriji.

==== `gitk` in `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Ko namestite Git, dobite tudi njegovi vizualni orodji `gitk` in `git-gui`.

`gitk` je grafični pregledovalnih zgodovine.
O njem razmišljajte, kot o močni lupini GUI preko `git log` in `git grep`.
To je orodje za uporabo, ko poskušate ugotoviti, kaj se je zgodilo v preteklosti ali vizualizirati zgodovino vašega projekta.

Gitk se najenostavnejše pokliče iz ukazne vrstice.
Naredite samo `cd` v repozitorij Git in vpišite:

[source,console]
----
$ gitk [git log options]
----

Gitk sprejema mnoge možnosti ukazne vrstice, večina od njih je podanih preko podležeče akcije `git log`.
Verjetno ena najbolj uporabnik je zastavica `--all`, ki pove gitk, da prikaže potrditve, ki so dosegljiva iz _kateregakoli_ ref-a ne samo HEAD.
Gitk-jev vmesnik izgleda takole:

.The `gitk` history viewer.
image::images/gitk.png[The `gitk` history viewer.]

Na vrhu je nekaj, kar izgleda kot nek izpis `git log --graph`; vsaka pika predstavlja potrditev, vrstice predstavljajo starševska razmerja in ref-i so prikazani kot obarvane škatlice.
Rumena pika predstavlja HEAD in rdeča pika predstavlja spremembe, ki še bodo postale potrditev.
Na dnu je pogled izbrane potrditve; komentarji in popravki na levi ter pogled povzetka na desni.
Vmes je zbirka kontrol uporabljenih za iskanje zgodovine.

`git-gui` na drugi strani je v glavnem orodje za obdelovanje potrditev.
Tudi to je najenostavnejše za priklicati iz ukazne vrstice:

[source,console]
----
$ git gui
----

In izgleda nekako takole:

.The `git-gui` commit tool.
image::images/git-gui.png[The `git-gui` commit tool.]

Na levi je kazalo; spremembe, ki niso v vmesni fazi, so na vrhu; spremembe dane v vmesno fazo so na dnu.
Premikate lahko celotne datoteke med dvemi stanji s klikom na njihove ikone ali pa lahko izberete datoteko za pogled s klikom na njeno ime.

Desno zgoraj je pogled diff, ki prikazuje spremembe za trenutno izbrano datoteko.
Posamezne kose lahko date v vmesno fazo (ali posamezne vrstice) z desnim klikom v tem področju.

Desno spodaj je sporočilo in področje akcije.
Vpišite vaše sporočilo v tekstovno polje in kliknite "`Commit`", da naredite nekaj podobnega `git commit`.
Lahko izberete tudi spreminjanje zadnje potrditve z izbiro "`Amend`" izbirnega gumba, ki bo posodobil področje "`Staged Changes`" z vsebino zadnje potrditve.
Nato lahko nekatere spremembe enostavno v ali izven vmesne faze, spremenite sporočilo potrditve in ponovno kliknete "`Commit`", da zamenjate starejšo potrditev z novo.

`gitk` in `git-gui` sta primera orodij orientiranih na naloge.
Vsako od njiju je prilagojeno določenemu namenu (ogledovanju zgodovine in ustvarjanju potrditev) in izpuščata lastnosti, ki niso potrebne za to opravilo.

==== GitHub za Mac in Windows

(((GitHub for macOS)))(((GitHub for Windows)))
GitHub je ustvaril dva klienta Git orientirana poteku dela: enega za Windows in enega za Mac.
Ta klienta sta dober primer poteka dela orientiranih orodij - namesto izpostavlja _vseh_ funkcionalnosti Gita, se namesto tega fokusirata na kuriran skupek pogosto uporabljenih lastnosti, ki skupaj dobro delajo.
Izgledata nekako takole:

.GitHub for Mac.
image::images/github_mac.png[GitHub for Mac.]

.GitHub for Windows.
image::images/github_win.png[GitHub for Windows.]

Oblikovana sta, da izgledata in delujeta zelo podobno, torej ju bomo tretirali kot en produkt v tem poglavju.
Ne bomo delali podrobnega povzetka teh orodij (imata svojo lastno dokumentacijo), vendar pa je v redu, da gremo na hitro skozi pogled sprememb (kjer boste porabili večino vašega časa).

* Na levi strani je seznam repozitorijev, katerim klient sledi; repozitorij lahko dodate (bodisi s kloniranjem ali pripetjem lokalno) s klikom na ikono "`+`" na vrhu tega področja.
* V centru je področje vnosa potrditev, ki vam omoga vnesti sporočilo potrditve in izbrati, katere datoteke naj bodo vključene.
  Na Windowsu je zgodovina potrditev prikazana direktno pod tem; na Macu je v ločenem zavihku.
* Na desni je pogled sprememb, ki prikazuje, kaj se je spremenilo v vašem delovnem direktoriju, ali katere spremembe so bile vključene v izbrani potrditvi.
* Zadnja stvar za opaziti je gumb "`Sync`" zgoraj desno, ki je primarni način za interakcijo preko omrežja.

[NOTE]
====
Ne potrebujete računa GitHub za uporabo teh orodij.
Medtem ko sta načrtovani posebej za storitev GitHuba in priporočeni potek dela, bosta tudi veselo delovali s katerimkoli drugim repozitorijem in delali operacije omrežja s katerimkoli gostiteljem Gita.
====

===== Namestitev

GitHub za Windows se lahko prenese iz https://windows.github.com[^] in GitHub za Mac iz https://mac.github.com[^].
Ko se aplikaciji prvič požene, vas peljeta skozi vse prve nastavitve Git, kot je nastavitev vašega imena in naslova e-pošte in obe nastavita smiselne privzete vrednosti za mnogo pogostih nastavitvenih opcij, kot je predpomnenje overilnic in obnašanje CRLF.

Oboji sta "`zimzeleni`" - posodobitve so prenesene in nameščene v ozadju, medtem kot sta aplikaciji odprti.
To ustrežljivo vključuje zapakirano verzijo Gita, kar pomeni, da vam verjetno ne bo treba skrbeti o ponovnem ročnem posodabljanju.
Na Windows vključuje klient bližnjico za zagon Powershella s Posh-git, o katerem bomo več govorili kasneje v tem poglavju.

Naslednji korak je dati orodju neke repozitorije za delo.
Klient vam prikaže seznam repozitorijev, do katerih imate dostop na GitHubu, in lahko jih klonira v enem koraku.
Če že imate lokalni repozitorij, samo potegnite njegov direktorij iz Finderja ali Windows Explorerja v okno klienta GitHub in vključen bo v seznam repozitorijev na levi.

===== Priporočljiv potek dela

Enkrat, ko je nameščen in nastavljen, lahko klient GitHub uporabite za mnogo pogostih opravil Git.
Namenjen potek dela za to orodje je včasih imenovan "`GitHub Flow.`"
To pokrivamo bolj podrobno v <<ch06-github#ch06-github_flow>>, vendar splošno bistvo je, da (a) boste dali potrditve na vejo in (b) dokaj redno boste sinhronizirali z oddaljenim repozitorijev.

Upravljanje vej je eno področij, kjer se ti dve orodji razhajata.
Na Macu je gumb na vrhu okna za ustvarjanje nove veje:

."`Create Branch`" button on macOS
image::images/branch_widget_mac.png[“Create Branch” button on macOS]

Na Windowsu je to narejeno tako, da vpišete ime nove veje v gradnik preklapljanja vej:

.Creating a branch on Windows
image::images/branch_widget_win.png[Creating a branch on Windows]

Ko je veja enkrat ustvarjena, je ustvarjanje novih potrditev dokaj enostavno.
Naredite nekaj sprememb v vašem delovnem direktoriju in ko preklopite na okno klienta GitHub, vam bo prikazal katere datoteke so se spremenile.
Vpišite sporočilo potrditve, izberite datoteke, ki bi jih želeli vključiti in kliknite na gumb "`Commit`" (ctrl-enter ali ⌘-enter).

Glavni način za interakcijo z ostalimi repozitoriji preko omrežja je skozi lastnost "`Sync`".
Git ima v notranjosti ločene operacije za porivanje, ujemanje, združevanje in ponovno baziranje vendar klienti GitHub strnejo vse te v eno večkoračno lastnost.
To se zgodi, ko kliknete na gumb Sync:

. `git pull --rebase`.
  Če to ni uspešno zaradi konflikta združevanja, povrnite z `git pull --no-rebase`.
. `git push`.

To je najbolj pogosta sekvenca ukazov omrežja, ko delate v tem stilu, tako da vam stiskanje v en ukaz prihrani veliko časa.

===== Povzetek

Ta orodja so zelo primerna za potek dela, za katerega so načrtovana.
Podobni razvijalci in nerazvijalci lahko sodelujejo na projektu v nekaj minutah in mnoge od najboljših praks za ta potek dela so zapečene v orodja.
Vendar, če je vaš potek dela različen ali želite več kontrole nad tem, kako in kdaj so operacije omrežja narejene, priporočamo, da uporabite drug klient ali ukazno vrstico.


==== Ostali GUI-ji

Na voljo je število ostalih grafičnih klientov Git in imajo celoten rang od specializiranih orodij z enim razlogom vse do aplikacij, ki poskušajo izpostaviti vse, kar Git lahko naredi.
Uradna spletna stran Git ima točen seznam najbolj popularnih klientov na https://git-scm.com/downloads/guis[^].
Bolj celovit seznam je na voljo na spletni strani Git wiki na https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[^].
