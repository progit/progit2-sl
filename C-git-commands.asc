[[C-git-commands]]
[appendix]
== Ukazi Git

Skozi knjigo smo predstavili desetine ukazov Git in se trudili, da bi jih predstavili znotraj neke vrste pripovedi s postopnim dodajanjem več ukazov v zgodbo.
Vendar pa to pusti primere uporabe ukazov nekoliko razpršene po celotni knjigi.

V tem dodatku bomo pregledali vse ukaze Git, ki smo jih obravnavali v knjigi, približno razvrščene glede na to, za kaj se uporabljajo.
Govorili bomo o tem, kaj vsak ukaz na splošno naredi, in nato poudarili, kje v knjigi smo ga uporabili.

[TIP]
====
Dolge možnosti lahko skrajšate.
Na primer, vtipkate lahko `git commit --a`, kar deluje tako, kot da bi vtipkali `git commit --amend`.
To deluje samo, če so črke za `--` edinstvene za eno možnost.
Pri pisanju skript uporabljajte polno opcijo.
====

=== Nastavitev in konfiguracija

Obstajata dva ukaza, ki se precej pogosto uporabljata od prve uporabe Gita do skupnega vsakodnevnega prilagajanja in sklicevanja: ukaza `config` in `help`.

==== git config

Git ima privzeti način za izvajanje na stotine stvari.
Za veliko teh stvari lahko Gitu poveste, naj jih privzeto izvaja drugače, ali pa nastavite svoje preference.
To vključuje vse, od tega, da poveste Gitu, kako vam je ime, do določenih nastavitev barv terminala, ali pa kateri urejevalnik uporabljate.
Obstaja več datotek, ki jih bo ta ukaz prebral in zapisal, tako da lahko vrednosti nastavite globalno ali na specifičnih repozitorijih.

Ukaz `git config` se je uporabljal v skoraj vsakem poglavju knjige.

V poglavju <<ch01-getting-started#_first_time>> smo ga uporabili, da smo pred začetkom uporabe Gita določili naše ime, e-poštni naslov in nastavitve urejevalnika.

V poglavju <<ch02-git-basics-chapter#_git_aliases>> smo pokazali, kako ga lahko uporabite za ustvarjanje okrajšanih ukazov, ki se razširijo v dolge zaporedne možnosti, da jih ni treba vsakič vpisovati.

V poglavju <<ch03-git-branching#_rebasing>> smo ga uporabili, da smo določili privzeto vedenje `--rebase`, ko zaženemo ukaz `git pull`.

V poglavju <<ch07-git-tools#_credential_caching>> smo ga uporabili, da smo nastavili privzeti repozitorij za vaša HTTP gesla.

V poglavju <<ch08-customizing-git#_keyword_expansion>> smo pokazali, kako nastaviti t.i. filtre smudge in clean na vsebino, ki prihaja in odhaja iz Gita.

Nazadnje, skoraj celotno poglavje <<ch08-customizing-git#_git_config>> je posvečeno temu ukazu.

[[ch_core_editor]]
==== Ukazi git config core.editor

Poleg navodil za nastavitve konfiguracije v poglavju <<ch01-getting-started#_editor>>, se lahko mnogi urejevalniki nastavijo na naslednji način:

.Izčrpen seznam konfiguracijskih ukazov `core.editor`
[cols="1,2",options="header"]
|==============================
|Urejevalnik | Konfiguracijski ukaz
|Atom |`git config --global core.editor "atom --wait"`
|BBEdit (macOS, with command line tools) |`git config --global core.editor "bbedit -w"`
|Emacs |`git config --global core.editor emacs`
|Gedit (Linux) |`git config --global core.editor "gedit --wait --new-window"`
|Gvim (Windows 64-bit) |`git config --global core.editor "'C:\Program Files\Vim\vim72\gvim.exe' --nofork '%*'"` (Glejte tudi opombo spodaj)
|Helix |`git config --global core.editor "helix"`
|Kate (Linux) |`git config --global core.editor "kate"`
|nano |`git config --global core.editor "nano -w"`
|Notepad (Windows 64-bit) |`git config core.editor notepad`
|Notepad++ (Windows 64-bit) |`git config --global core.editor "'C:\Program Files\Notepad++\notepad++.exe' -multiInst -notabbar -nosession -noPlugin"` (Glejte tudi opombo spodaj)
|Scratch (Linux)|`git config --global core.editor "scratch-text-editor"`
|Sublime Text (macOS) |`git config --global core.editor "/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl --new-window --wait"`
|Sublime Text (Windows 64-bit) |`git config --global core.editor "'C:\Program Files\Sublime Text 3\sublime_text.exe' -w"` (Glejte tudi opombo spodaj)
|TextEdit (macOS)|`git config --global core.editor "open --wait-apps --new -e"`
|Textmate |`git config --global core.editor "mate -w"`
|Textpad (Windows 64-bit) |`git config --global core.editor "'C:\Program Files\TextPad 5\TextPad.exe' -m` (Glejte tudi opombo spodaj)
|UltraEdit (Windows 64-bit) | `git config --global core.editor Uedit32`
|Vim |`git config --global core.editor "vim --nofork"`
|Visual Studio Code |`git config --global core.editor "code --wait"`
|VSCodium (Free/Libre Open Source Software Binaries of VSCode) | `git config --global core.editor "codium --wait"`
|WordPad |`git config --global core.editor '"C:\Program Files\Windows NT\Accessories\wordpad.exe"'"`
|Xi | `git config --global core.editor "xi --wait"`
|==============================

[NOTE]
====
Če imate na 64-bitnem sistemu Windows 32-bitni urejevalnik, bo program nameščen v `C:\Program Files (x86)\`, namesto v `C:\Program Files\`, kot je prikazano v zgornji tabeli.
====

==== git help

Ukaz `git help` se uporablja za prikaz dokumentacije katerega koli ukaza, ki ga Git vsebuje.
Čeprav smo v tem dodatku podali grob pregled večine najbolj priljubljenih ukazov, lahko vedno za celoten seznam vseh možnih možnosti in zastavic vsakega ukaza zaženete `git help <ukaz>`.

Ukaz `git help` smo predstavili v poglavju <<ch01-getting-started#_git_help>> in prikazali, kako ga uporabiti za iskanje dodatnih informacij o `git shell` v poglavju <<ch04-git-on-the-server#_setting_up_server>>.


=== Pridobivanje in ustvarjanje projektov

Obstajata dva načina za pridobivanje repozitorijev Git.
Eden je kopiranje iz obstoječega repozitorija v omrežju ali drugje, druga pa je ustvarjanje novega v obstoječem direktoriju.

==== git init

Da bi iz direktorija ustvarili nov repozitorij Git in začeli uporabljati nadzor različic, preprosto zaženite `git init`.

To smo najprej predstavili v poglavju <<ch02-git-basics-chapter#_getting_a_repo>>, kjer smo ustvarili popolnoma nov repozitorij, s katerim smo začeli delati.

V poglavju <<ch03-git-branching#_remote_branches>> smo na kratko govorili o tem, kako lahko spremenite privzeto ime veje "`master`".

Ta ukaz smo uporabili za ustvarjanje praznega golega repozitorija za strežnik v <<ch04-git-on-the-server#_bare_repo>>.

Nazadnje pa smo v <<ch10-git-internals#_plumbing_porcelain>> podrobno razložili, kaj ukaz dejansko počne za zavesami.

==== git clone

Ukaz `git clone` je dejansko nekakšen ovitek okoli več drugih ukazov.
Ustvari novo mapo, vstopi vanjo in zažene `git init`, da naredi prazen repozitorij Git, doda oddaljeni strežnik (`git remote add`) na naslov URL, ki se mu ga poda (privzeto poimenovan `origin`), zažene `git fetch` iz tega oddaljenega repozitorija in nato z `git checkout` preveri najnovejšo potrditev v vaši delovni mapi.

Ukaz `git clone` se uporablja na desetinah mest po knjigi, vendar bomo našteli le nekaj zanimivih.

Uvodoma je predstavljen in pojasnjen v <<ch02-git-basics-chapter#_git_cloning>>, kjer predstavimo nekaj primerov.

V poglavju <<ch04-git-on-the-server#_getting_git_on_a_server>> preučujemo uporabo možnosti `--bare`, da ustvarimo kopijo repozitorija Git brez delovne mape.

V poglavju <<ch07-git-tools#_bundling>> ga uporabimo za razpakiranje zapakiranega repozitorija Git.

Končno pa v poglavju <<ch07-git-tools#_cloning_submodules>> spoznamo možnost `--recurse-submodules`, ki poenostavi kloniranje repozitorija z vdelanimi podmoduli.

Čeprav se uporablja na mnogih drugih mestih v knjigi, so ta tista, ki so nekoliko edinstvena, ali kjer se uporablja na načine, ki se nekoliko razlikujejo.


=== Osnove posnetkov

Za osnovni potek dela s posnetki vsebine in potrjevanjem v zgodovino je le nekaj osnovnih ukazov.

==== git add

Ukaz `git add` doda vsebino iz delovnega direktorija v področje priprave podatkov (ali "`indeks`") za naslednjo potrditev.
Ko se zažene ukaz `git commit`, privzeto pogleda le to področje za pripravo, zato se ukaz `git add` uporablja za urejanje, kaj želite imeti v naslednjem posnetku potrditve.

Ta ukaz je v Gitu izjemno pomemben in je v tej knjigi omenjen ali uporabljen na desetine mestih.
Hitro bomo pokrili nekatere edinstvene načine uporabe.

Najprej podrobno predstavimo in razložimo `git add` v poglavju <<ch02-git-basics-chapter#_tracking_files>>.

V poglavju <<ch03-git-branching#_basic_merge_conflicts>> omenimo, kako ga uporabiti za reševanje konfliktov združevanja.

V poglavju <<ch07-git-tools#_interactive_staging>> preidemo na uporabo interaktivnega področja za pripravo samo določenih delov spremenjene datoteke.

Končno ga v poglavju <<ch10-git-internals#_tree_objects>> emuliramo na nizki ravni, tako da lahko dobite idejo, kaj počne za zavesami.

==== git status

Ukaz `git status` vam bo pokazal različna stanja datotek v vašem delovnem direktoriju in področju priprave.
Katere datoteke so spremenjene in niso v področju priprave ter katere so v področju priprave, vendar še niso bile potrjene.
V svoji običajni obliki vam bo tudi pokazal nekaj osnovnih namigov, kako premikati datoteke med temi stopnjami.

Najprej obravnavamo `status` v poglavju <<ch02-git-basics-chapter#_checking_status>>, tako v svojih osnovnih kot poenostavljenih oblikah.
Čeprav ga uporabljamo skozi celotno knjigo, je tam zajeto praktično vse, kar lahko storite z ukazom `git status`.

==== git diff

Ukaz `git diff` se uporablja, ko želite videti razlike med katerima koli dvema drevesoma.
To bi lahko bila razlika med vašim delovnim okoljem in področjem priprave (`git diff` sam po sebi), med področjem priprave in zadnjim potrjenim stanjem (`git diff --staged`) ali med dvema potrjenima stanjema (`git diff master branchB`).

Najprej si ogledamo osnovne uporabe ukaza `git diff` v poglavju <<ch02-git-basics-chapter#_git_diff_staged>>, kjer prikažemo, kako si ogledati, katere spremembe so pripravljene in katere še niso.

Uporabljamo ga za iskanje morebitnih težav s presledki pred potrditvijo z možnostjo `--check` v poglavju <<ch05-distributed-git#_commit_guidelines>>.

Prikažemo, kako preveriti razlike med vejami bolj učinkovito s sintakso `git diff A...B` v poglavju <<ch05-distributed-git#_what_is_introduced>>.

Uporabljamo ga za filtriranje razlik med presledki z `-b` in primerjavo različnih stopenj konfliktnih datotek z `--theirs`, `--ours` in `--base` v poglavju <<ch07-git-tools#_advanced_merging>>.

Nazadnje ga uporabimo za učinkovito primerjavo sprememb podmodulov z možnostjo `--submodule` v poglavju <<ch07-git-tools#_starting_submodules>>.

==== git difftool

Ukaz `git difftool` preprosto zažene zunanje orodje, ki vam prikaže razliko med dvema drevesoma, v primeru, da želite uporabiti kaj drugega kot le vgrajeni `git diff` ukaz.

To le kratko omenimo v <<ch02-git-basics-chapter#_git_diff_staged>>.

==== git commit

Ukaz `git commit` vzame vsebino datotek, ki so bile dane v pripravo z `git add` in zabeleži nov trajni posnetek v bazi podatkov in nato premakne kazalec veje na trenutni veji.

Osnove za izvajanje posnetkov predstavimo v <<ch02-git-basics-chapter#_committing_changes>>.
Tam prikažemo tudi, kako uporabiti zastavico `-a`, da preskočite korak `git add` v vsakodnevnih delovnih procesih in kako uporabiti zastavico `-m`, da na ukazni vrstici predate sporočilo za potrditev namesto zagona urejevalnika.

V poglavju <<ch02-git-basics-chapter#_undoing>> predstavimo uporabo možnosti `--amend`, s katero lahko ponovno opravite zadnjo potrditev.

V poglavju <<ch03-git-branching#_git_branches_overview>> gremo v podrobnosti, kaj `git commit` naredi in zakaj to počne na ta način.

Kako podpisati posnetke kriptografsko z zastavico `-S` smo pogledali v poglavju <<ch07-git-tools#_signing_commits>>.

Nazadnje pogledamo, kaj ukaz `git commit` naredi v ozadju in kako je dejansko izveden v poglavju <<ch10-git-internals#_git_commit_objects>>.

==== git reset

Ukaz `git reset` se uporablja predvsem za razveljavitev stvari, kot se morda lahko sklepa iz glagola.
Kazalec `HEAD` premakne in po potrebi spremeni kazalec `index` ali področje priprave in poleg tega lahko z možnostjo `--hard` po potrebi spremeni delovni imenik.
S to končno možnostjo je mogoče izgubiti delo, če se uporabi napačno, zato se prepričajte, da ga razumete, preden ga uporabite.

Najprej obravnavamo najpreprostejšo uporabo ukaza `git reset` v poglavju <<ch02-git-basics-chapter#_unstaging>>, kjer ga uporabimo za razveljavitev priprave datoteke, na kateri smo že uporabili ukaz `git add`.

Podrobno ga obravnavamo v poglavju <<ch07-git-tools#_git_reset>>, ki je v celoti posvečeno razlagi tega ukaza.

Ukaz `git reset --hard` uporabimo za preklic združevanja v poglavju <<ch07-git-tools#_abort_merge>>, kjer uporabimo tudi ukaz `git merge --abort`, ki je nekolikšen ovoj za ukaz `git reset`.

==== git rm

Ukaz `git rm` se uporablja za odstranjevanje datotek iz področja priprave in delovnega direktorija Git.
Podobno kot ukaz `git add`, tudi ta ukaz pripravi odstranitev datoteke za naslednjo potrditev.

V poglavju <<ch02-git-basics-chapter#_removing_files>> podrobneje obravnavamo ukaz `git rm`, vključno z rekurzivnim odstranjevanjem datotek in odstranjevanjem datotek samo iz področja priprave, vendar jih pustimo v delovnem direktoriju z uporabo možnosti `--cached`.

Edina druga različna uporaba ukaza `git rm` v knjigi je v poglavju <<ch10-git-internals#_removing_objects>>, kjer na kratko uporabimo in pojasnimo uporabo možnosti `--ignore-unmatch` pri izvajanju ukaza `git filter-branch`, kar preprosto preprečuje, da bi se prijavila napaka, ko datoteke, ki jih želimo odstraniti, ni.
To lahko koristi za skriptiranje.

==== git mv

Ukaz `git mv` je preprost ukaz, ki omogoča premikanje datotek in nato se izvede ukaz `git add` na novi datoteki ter ukaz `git rm` na stari datoteki.

Ta ukaz samo na kratko omenimo v poglavju <<ch02-git-basics-chapter#_git_mv>>.

==== git clean

Ukaz `git clean` se uporablja za odstranjevanje nepotrebnih datotek iz vašega delovnega direktorija.
To lahko vključuje odstranjevanje začasnih artefaktov gradnje ali datotek z združitvenimi konflikti.

Veliko možnosti in scenarijev, v katerih bi uporabili ukaz clean, obravnavamo v poglavju <<ch07-git-tools#_git_clean>>.

=== Veje in združevanje

V Gitu obstaja kar nekaj ukazov, ki omogočajo večino funkcionalnosti razvejanja in združevanja.

==== git branch

Ukaz `git branch` je v resnici nekakšno orodje za upravljanje vej.
Omogoča vam izpis seznama vej, ustvarjanje novih vej, brisanje in preimenovanje vej.

Večino poglavja <<ch03-git-branching#ch03-git-branching>> je namenjenega ukazu `branch`, ki ga uporabljamo skozi celotno poglavje.
Prvič ga predstavimo v poglavju <<ch03-git-branching#_create_new_branch>>, večino njegovih drugih funkcij (seznam in brisanje) pa opišemo v poglavju <<ch03-git-branching#_branch_management>>.

V poglavju <<ch03-git-branching#_tracking_branches>> uporabimo možnost `git branch -u`, da nastavimo sledenje veji.

Na koncu pa opišemo nekaj njegovih ozadij v poglavju <<ch10-git-internals#_git_refs>>.

==== git checkout

Ukaz `git checkout` se uporablja za preklapljanje med vejami in preverjanje vsebine v delovnem imeniku.

Prvič se srečamo z ukazom v poglavju <<ch03-git-branching#_switching_branches>> skupaj z ukazom `git branch`.

V poglavju <<ch03-git-branching#_tracking_branches>> prikažemo, kako ga uporabiti za sledenje vejam z zastavico `--track`.

V poglavju <<ch07-git-tools#_checking_out_conflicts>> ga uporabimo, da ponovno uvedemo konflikte med datotekami z `--conflict=diff3`.

V poglavju <<ch07-git-tools#_git_reset>> podrobneje opišemo njegovo razmerje z ukazom `git reset`.

Na koncu pa v poglavju <<ch10-git-internals#ref_the_ref>> podrobneje opišemo njegovo izvajanje.

==== git merge

Orodje `git merge` se uporablja za združevanje ene ali več vej v vejo, ki jo imate odprto.
Nato se trenutna veja premakne na rezultat združevanja.

Ukaz `git merge` je bil prvič predstavljen v poglavju <<ch03-git-branching#_basic_branching>>.
Čeprav se v knjigi uporablja na različnih mestih, obstaja zelo malo različic ukaza `merge` - običajno samo `git merge <branch>` z imenom ene veje, ki jo želite združiti.

V poglavju <<ch05-distributed-git#_public_project>> smo na koncu obravnavali združevanje z zdrobljenim zgodovinskim zapisom (kjer Git združi delo, vendar se pretvarja, kot da gre samo za novo potrditev, brez beleženja zgodovine veje, ki jo združujete).

V poglavju <<ch07-git-tools#_advanced_merging>> smo se veliko naučili o postopku in ukazu za združevanje, vključno z ukazom `-Xignore-space-change` in zastavico `--abort` za prekinitev težavnega združevanja.

Naučili smo se preverjati podpise pred združevanjem, če vaš projekt uporablja podpisovanje z GPG, v poglavju <<ch07-git-tools#_signing_commits>>.

Na koncu smo se v poglavju <<ch07-git-tools#_subtree_merge>> naučili o združevanju poddreves.

==== git mergetool

Ukaz `git mergetool` enostavno zažene zunanji pripomoček za združevanje v primeru težav pri združevanju v Gitu.

Omenimo ga na hitro v <<ch03-git-branching#_basic_merge_conflicts>> in podrobneje razložimo, kako lahko implementirate svoj lastni zunanji pripomoček za združevanje v <<ch08-customizing-git#_external_merge_tools>>.

==== git log

Ukaz `git log` se uporablja za prikazovanje dosegljive zabeležene zgodovine projekta od najnovejše zabeležene različice nazaj.
Privzeto prikazuje samo zgodovino veje, na kateri se trenutno nahajate, vendar lahko navedete drugačne ali celo več glav ali vej, od katerih se želite premikati.
Pogosto se uporablja tudi za prikaz razlik med dvema ali več vejami na ravni potrditev.

Ta ukaz se uporablja v skoraj vsakem poglavju knjige za prikazovanje zgodovine projekta.

Ukaz predstavimo in ga podrobno obravnavamo v <<ch02-git-basics-chapter#_viewing_history>>.
Tam si ogledamo možnosti `-p` in `--stat`, da dobimo idejo, kaj je bilo predstavljeno v vsaki potrditvi, in možnosti `--pretty` in `--oneline`, da si zgodovino ogledamo bolj jedrnato, skupaj s preprostimi možnostmi filtriranja po datumu in avtorju.

V <<ch03-git-branching#_create_new_branch>> ga uporabimo z možnostjo `--decorate`, da si lažje vizualiziramo, kje so kazalniki naših vej, in uporabimo tudi možnost `--graph`, da si ogledamo, kako izgledajo različne zgodovine.

V poglavjih <<ch05-distributed-git#_private_team>> in <<ch07-git-tools#_commit_ranges>> pokrijemo sintakso `branchA..branchB` pri uporabi ukaza `git log`, da vidimo, katere potrditve so edinstvene za vejo v primerjavi z drugo vejo.
V <<ch07-git-tools#_commit_ranges>> to precej obsežno obravnavamo.

V poglavjih <<ch07-git-tools#_merge_log>> in <<ch07-git-tools#_triple_dot>> pokrijemo uporabo formata `branchA...branchB` in sintakse `--left-right`, da vidimo, kaj je v eni veji ali drugi, vendar ne v obeh.
V poglavju <<ch07-git-tools#_merge_log>> si ogledamo tudi, kako uporabiti možnost `--merge` za pomoč pri odpravljanju konfliktov med združevanjem, in uporabo možnosti `--cc`, da si ogledamo konflikte pri združevanju potrditev v zgodovini.

V poglavju <<ch07-git-tools#_git_reflog>> uporabimo možnost `-g`, da si ogledamo Gitov reflog prek te orodne vrstice, namesto da bi prehajali po vejah.

V poglavju <<ch07-git-tools#_searching>> si ogledamo uporabo možnosti `-S` in `-L` za izvajanje precej zapletenih iskanj po nečem, kar se je zgodilo v zgodovini kode, kot je npr. ogled zgodovine funkcije.

V poglavju <<ch07-git-tools#_signing_commits>> se naučimo, kako uporabiti `--show-signature`, da dodamo potrditveno verigo k vsaki potrditvi v izpisu `git log` glede na to, ali je bilo pravilno podpisano ali ne.

==== git stash

Ukaz `git stash` se uporablja za začasno shranjevanje nezaključenega dela, da se očisti delovni direktorij, ne da bi bilo treba nedokončano delo potrditi na veji.

To je v bistvu v celoti pokrito v poglavju <<ch07-git-tools#_git_stashing>>.

==== git tag

Ukaz `git tag` se uporablja za dajanje trajnih zaznamkov določeni točki v zgodovini kode.
Navadno se uporablja za stvari, kot so izdaje.

Ta ukaz je predstavljen in podrobno obravnavan v poglavju <<ch02-git-basics-chapter#_git_tagging>> in ga v praksi uporabljamo v poglavju <<ch05-distributed-git#_tagging_releases>>.

Prav tako obravnavamo, kako ustvariti z GPG podpisano oznako z zastavico `-s` in kako jo preveriti z zastavico `-v` v poglavju <<ch07-git-tools#_signing>>.


=== Deljenje in posodabljanje projektov

V Gitu ni veliko ukazov, ki dostopajo do omrežja, saj skoraj vsi ukazi delujejo na lokalni podatkovni bazi.
Ko ste pripravljeni deliti svoje delo ali povleči spremembe od drugod, obstaja nekaj ukazov, ki se ukvarjajo z oddaljenimi repozitoriji.

==== git fetch

Ukaz `git fetch` se poveže s oddaljenim repozitorijem in prenese vse informacije iz njega, ki niso v vašem trenutnem repozitoriju, ter jih shrani v vašo lokalno podatkovno bazo.

Ta ukaz najprej obravnavamo v poglavju <<ch02-git-basics-chapter#_fetching_and_pulling>> in nadaljujemo z ogledom primerov uporabe v poglavju <<ch03-git-branching#_remote_branches>>.

Uporabljamo ga tudi v več primerih v <<ch05-distributed-git#_contributing_project>>.

Uporabljamo ga za prenos posamezne specifične reference, ki je zunaj privzetega prostora v <<ch06-github#_pr_refs>> in vidimo, kako prenesti iz svežnja v <<ch07-git-tools#_bundling>>.

V <<ch10-git-internals#_refspec>> nastavimo zelo prilagojene refspecifikacije, da `git fetch` opravi nekoliko drugačno dejanje kot privzeto.

==== git pull

Ukaz `git pull` je v bistvu kombinacija ukazov `git fetch` in `git merge`, pri čemer Git prenese iz oddaljenega repozitorija, ki ga določite, in ga takoj poskuša združiti v vejo, na kateri ste.

Ukaz na hitro predstavimo v <<ch02-git-basics-chapter#_fetching_and_pulling>> in prikažemo, kako videti, kaj bo združeno, če ga zaženete v <<ch02-git-basics-chapter#_inspecting_remote>>.

Prikažemo tudi, kako ga uporabiti za pomoč pri težavah z ponovnim baziranjem v <<ch03-git-branching#_rebase_rebase>>.

Prikažemo, kako ga uporabiti z URL-jem za enkratno pridobivanje sprememb v <<ch05-distributed-git#_checking_out_remotes>>.

Končno zelo hitro omenimo, da mu lahko s stikalom `--verify-signatures` omogočimo preverjanje, ali so potrditve, ki jih pridobivamo, podpisane z GPG, v poglavju <<ch07-git-tools#_signing_commits>>.

==== git push

Ukaz `git push` se uporablja za komunikacijo z drugim repozitorijem, izračuna razliko med lokalno bazo podatkov in oddaljeno bazo podatkov ter to razliko potisne v drug repozitorij.
Potrebna je pisna dostopnost do drugega repozitorija in običajno je avtenticirana na nek način.

Najprej smo si ogledali ukaz `git push` v poglavju <<ch02-git-basics-chapter#_pushing_remotes>>.
Tukaj smo pokrili osnove potiskanja veje v oddaljeni repozitorij.
V poglavju <<ch03-git-branching#_pushing_branches>> smo šli nekoliko globlje v potiskanje specifičnih vej in v poglavju <<ch03-git-branching#_tracking_branches>> smo si pogledali, kako nastaviti sledenje vej, da se samodejno potisnejo.
V poglavju <<ch03-git-branching#_delete_branches>> smo uporabili zastavico `--delete`, da izbrišemo vejo na strežniku z `git push`.

Skozi poglavje <<ch05-distributed-git#_contributing_project>> smo si ogledali več primerov uporabe `git push` za deljenje dela na vejah preko več oddaljenih repozitorijev.

V poglavju <<ch02-git-basics-chapter#_sharing_tags>> smo videli, kako ga uporabiti za deljenje oznak, ki ste jih ustvarili, z uporabo možnosti `--tags`.

V poglavju <<ch07-git-tools#_publishing_submodules>> smo uporabili možnost `--recurse-submodules`, da smo preverili, ali je bilo vso delo z našimi podmoduli objavljeno, preden potisnemo nadrejeni projekt, kar je lahko resnično koristno pri uporabi podmodulov.

V poglavju <<ch08-customizing-git#_other_client_hooks>> smo na kratko govorili o kavlju `pre-push`, ki je skripta, ki jo lahko nastavimo, da se izvede pred končanjem potiskanja, da preveri, ali je potiskanje dovoljeno.

Na koncu, smo si v poglavju <<ch10-git-internals#_pushing_refspecs>> ogledali potiskanje z uporabo celotnega refspec-a namesto splošnih bližnjic, ki se običajno uporabljajo.
To vam lahko pomaga, da boste zelo specifični glede dela, ki ga želite deliti.

==== git remote

Ukaz `git remote` je upravljalsko orodje za vaše zapise oddaljenih repozitorijev.
Omogoča vam, da dolge URL-je shranite kot kratke ročaje, kot je "`origin`", tako da jih ni treba vedno vpisovati.
Lahko imate več takih ročajev in ukaz `git remote` se uporablja za dodajanje, spreminjanje in brisanje teh ročajev.

Ta ukaz je podrobno opisan v poglavju <<ch02-git-basics-chapter#_remote_repos>>, vključno s seznamom, dodajanjem, odstranjevanjem in preimenovanjem ročajev.

Uporablja se skoraj v vsakem nadaljnjem poglavju v knjigi, vendar vedno v standardnem formatu `git remote add <name> <url>`.

==== git archive

Ukaz `git archive` se uporablja za ustvarjanje arhivske datoteke določenega posnetka projekta.

`git archive` uporabimo za ustvarjanje tarballa projekta za deljenje v poglavju <<ch05-distributed-git#_preparing_release>>.

==== git submodule

Ukaz `git submodule` se uporablja za upravljanje zunanjih repozitorijev znotraj normalnih repozitorijev.
To bi lahko bilo za knjižnice ali druge vrste skupnih virov.
Ukaz `submodule` ima več podukazov (`add`, `update`, `sync` itd.) za upravljanje teh virov.

Ta ukaz je samo omenjen in v celoti pokrit v poglavju <<ch07-git-tools#_git_submodules>>.

=== Pregled in primerjava

==== git show

Ukaz `git show` lahko prikaže objekt Gita na preprost in človeku berljiv način.
Običajno bi ga uporabili za prikaz informacij o oznaki ali potrditvi.

Prvič ga uporabimo za prikaz informacij o anotiranih oznakah v poglavju <<ch02-git-basics-chapter#_annotated_tags>>.

Kasneje smo ga precej uporabljali v poglavju <<ch07-git-tools#_revision_selection>> za prikaz potrditev, do katerih pridemo z različnimi izbirami revizij.

Ena od bolj zanimivih stvari, ki jih naredimo z `git show`, je v poglavju <<ch07-git-tools#_manual_remerge>>, kjer izvlečemo vsebino določenih datotek iz različnih stopenj med konfliktom združevanja.

==== git shortlog

Ukaz `git shortlog` se uporablja za povzetek izhoda ukaza `git log`.
Uporablja veliko istih možnosti kot ukaz `git log`, vendar namesto naštevanja vseh potrditev prikaže povzetek potrditev razvrščenih po avtorju.

V poglavju <<ch05-distributed-git#_the_shortlog>> smo pokazali, kako ga uporabiti za ustvarjanje lepega dnevnika sprememb.

==== git describe

Ukaz `git describe` se uporablja za karkoli, kar se se razreši v potrditev, in proizvede niz, ki je bolj čitljiv za človeka in se ne bo spremenil.
To je način, kako dobiti opis potrditve, ki je tako nedvoumna kot SHA-1 potrditve, vendar bolj razumljiv.

Ukaz `git describe` smo uporabili v poglavjih <<ch05-distributed-git#_build_number>> in <<ch05-distributed-git#_preparing_release>>, da smo dobili niz za poimenovanje naše datoteke za izdajo.


=== Razhroščevanje

Git ima nekaj ukazov, ki se uporabljajo za odpravljanje napak v vaši kodi.
To sega od ugotavljanja, kje je bilo nekaj predstavljeno, do ugotavljanja, kdo je to predstavil.

==== git bisect

Orodje `git bisect` je neverjetno uporabno za odpravljanje napak, ki se uporablja za iskanje, katera potrditev je prva predstavila napako ali težavo z avtomatskim binarnim iskanjem.

V celoti je opisano v poglavju <<ch07-git-tools#_binary_search>> in je samo omenjeno v tem poglavju.

==== git blame

Ukaz `git blame` označuje vrstice katere koli datoteke s potrditvijo, ki je bila zadnja, ki je uvedla spremembo v vsako vrstico datoteke, in kdo je ta potrditev ustvaril.
To je koristno, da najdete osebo, ki jo lahko povprašate po dodatnih informacijah o določenem delu vaše kode.

Opisan je v poglavju <<ch07-git-tools#_file_annotation>> in se samo omeni v tem poglavju.

==== git grep

Ukaz `git grep` vam lahko pomaga najti kateri koli niz ali redni izraz v kateri koli datoteki vaše izvorne kode, tudi v starejših različicah vašega projekta.

Opisan je v poglavju <<ch07-git-tools#_git_grep>> in se samo omeni v tem poglavju.

=== Popravljanje

Nekaj ukazov v Gitu se osredotoča na koncept razmišljanja o potrditvah glede na spremembe, ki jih uvajajo, kot da bi bila serija potrditev serija popravkov.
Ti ukazi vam pomagajo upravljati vaše veje na ta način.

==== git cherry-pick

Ukaz `git cherry-pick` se uporablja za vzemanje spremembe, uvedene v eni potrditvi Gita, in poskuša ponovno uvesti kot novo potrditev na veji, na kateri trenutno delate.
To je lahko koristno, če želite vzeti samo eno ali dve potrditvi iz veje posamezno, namesto da bi združili celotno vejo, ki vključuje vse spremembe.

Postopek "Cherry picking" je opisan in prikazan v poglavju <<ch05-distributed-git#_rebase_cherry_pick>>.

==== git rebase

Ukaz `git rebase` je v bistvu avtomatizirana funkcija `cherry-pick`.
Določi serijo potrditev in jih nato posamično ponovno uvede drugje v istem vrstnem redu.

Postopek ponovnega baziranja je podrobno opisan v poglavju <<ch03-git-branching#_rebasing>> in vključuje tudi obravnavo težav sodelovanja, ki nastanejo pri ponovni uvedbi vej, ki so že javne.

V praksi ga uporabljamo med primerom razdelitve zgodovine na dva ločena repozitorija v poglavju <<ch07-git-tools#_replace>>, kjer uporabljamo tudi zastavico `--onto`.

V poglavju <<ch07-git-tools#ref_rerere>> se srečamo s konfliktom združevanja med postopkom ponovnega baziranja.

Prav tako ga uporabljamo v interaktivnem načinu skriptiranja z možnostjo `-i` v poglavju <<ch07-git-tools#_changing_multiple>>.

==== git revert

Ukaz `git revert` je v bistvu obraten od `git cherry-pick`.
Ustvari novo potrditev, ki uporabi natančno nasprotno spremembo, kot je bila vpeljana v izbrani potrditvi, v bistvu pa jo razveljavi ali povrne nazaj.

Uporabimo ga v <<ch07-git-tools#_reverse_commit>>, da razveljavimo potrditev združevanja.

=== E-pošta

Mnogi projekti Git, vključno z Git samim, se v celoti vzdržujejo preko seznamov za pošiljanje e-pošte.
Git ima vgrajena orodja, ki pomagajo olajšati ta proces, od ustvarjanja popravkov, ki jih lahko enostavno pošljete po e-pošti, do uporabe teh popravkov iz poštnega nabiralnika.

==== git apply

Ukaz `git apply` uporabi popravek, ustvarjen z ukazom `git diff` ali celo z GNU diff ukazom.
Podobno kot ukaz `patch` naredi z nekaj manjšimi razlikami.

Predstavljamo uporabo in okoliščine, v katerih ga lahko uporabimo v poglavju <<ch05-distributed-git#_patches_from_email>>.

==== git am

Ukaz `git am` se uporablja za uporabo programskih popravkov iz poštnega nabiralnika, posebej tistega, ki je oblikovan kot mbox.
To je uporabno za prejemanje popravkov preko e-pošte in njihovo enostavno uporabo v projektu.

Pokrili smo uporabo in delovni tok okoli `git am` v <<ch05-distributed-git#_git_am>>, vključno z uporabo možnosti `--resolved`, `-i` in `-3`.

Obstaja tudi veliko število kaveljčkov, ki jih lahko uporabite za pomoč pri delovnem toku okoli `git am` in vsi so opisani v poglavju <<ch08-customizing-git#_email_hooks>>.

Uporabimo ga tudi za uporabo sprememb oblikovanih kot popravki za zahteve potegov na GitHubu v poglavju <<ch06-github#_email_notifications>>.

==== git format-patch

Ukaz `git format-patch` se uporablja za ustvarjanje zaporedja popravkov v formatu mbox, ki jih lahko uporabite za pošiljanje na seznamu pošte v pravilno oblikovani obliki.

V primeru sodelovanja v projektu z uporabo orodja `git format-patch` smo šli skozi v poglavju <<ch05-distributed-git#_project_over_email>>.

==== git imap-send

Ukaz `git imap-send` omogoča nalaganje nabiralnika, ki je ustvarjen z orodjem `git format-patch`, v IMAP osnutke mape.

V poglavju <<ch05-distributed-git#_project_over_email>> smo prikazali primer, kako prispevati k projektu s pošiljanjem popravkov s pomočjo orodja `git imap-send`.

==== git send-email

Ukaz `git send-email` se uporablja za pošiljanje popravkov, ki so ustvarjeni z `git format-patch` preko e-pošte.

V poglavju <<ch05-distributed-git#_project_over_email>> smo prikazali primer, kako prispevati k projektu s pošiljanjem popravkov s pomočjo orodja `git send-email`.

==== git request-pull

Ukaz `git request-pull` se preprosto uporablja za generiranje sporočila, ki se pošlje po e-pošti.
Če imate vejo na javnem strežniku in želite nekoga obvestiti, kako integrirati te spremembe brez pošiljanja popravkov preko e-pošte, lahko zaženete ta ukaz in pošljete izpis osebi, ki naj prevzame spremembe.

V poglavju <<ch05-distributed-git#_public_project>> smo prikazali, kako uporabiti `git request-pull` za generiranje sporočila o prevzemu.

=== Zunanji sistemi

Git ima nekaj ukazov za integracijo z drugimi sistemi za nadzor različic.

==== git svn

Ukaz `git svn` se uporablja za komunikacijo s sistemom za nadzor različic Subversion kot odjemalec.
To pomeni, da lahko uporabite Git za prevzem in oddajanje na strežniku Subversion.

Ta ukaz je podrobno opisan v poglavju <<ch09-git-and-other-systems#_git_svn>>.

==== git fast-import

Za druge sisteme za nadzor različic ali uvoz iz skoraj katerega koli formata lahko uporabite `git fast-import`, da hitro preslikate drug format v nekaj, kar lahko Git enostavno beleži.

Ta ukaz je podrobno opisan v poglavju <<ch09-git-and-other-systems#_custom_importer>>.

=== Administracija

Če upravljate z repozitorijem Git ali morate nekaj popraviti na velik način, Git zagotavlja številne upravljavske ukaze, ki vam lahko pomagajo.

==== git gc

Ukaz `git gc` sproži »`sproščanje pomnilnika`« v vašem repozitoriju, odstranjuje nepotrebne datoteke iz vaše zbirke podatkov in preostale datoteke združi v bolj učinkovit format.

Ta ukaz običajno zažene v ozadju, lahko pa ga zaženete ročno, če želite.
Nekaj primerov tega je v poglavju <<ch10-git-internals#_git_gc>>.

==== git fsck

Ukaz `git fsck` se uporablja za preverjanje notranje zbirke podatkov za težave ali neskladnosti.

To uporabimo samo hitro enkrat v poglavju <<ch10-git-internals#_data_recovery>>, da poiščemo viseče objekte.

==== git reflog

Ukaz `git reflog` pregleda dnevnik, kje so bile glave vaših vej med delom, da najdete potrditve, ki ste jih morda izgubili s spreminjanjem zgodovine.

Ta ukaz obravnavamo predvsem v <<ch07-git-tools#_git_reflog>>, kjer prikazujemo normalno uporabo in kako z uporabo `git log -g` videti enake informacije kot v izpisih `git log`.

Prav tako prikažemo praktičen primer obnavljanja takšne izgubljene veje v <<ch10-git-internals#_data_recovery>>.

==== git filter-branch

Ukaz `git filter-branch` se uporablja za prepisovanje veliko potrditev v skladu z določenimi vzorci, kot so odstranjevanje datoteke povsod ali filtriranje celotnega repozitorija v eno podmapo za izvleček projekta.

V <<ch07-git-tools#_removing_file_every_commit>> smo pojasnili ukaz in raziskali več različnih možnosti, kot so `--commit-filter`, `--subdirectory-filter` in `--tree-filter`.

V <<ch09-git-and-other-systems#_git_p4>> ga uporabljamo za popravilo uvoženih zunanjih repozitorijev.

=== Orodja za sisteme napeljave

V knjigi smo naleteli tudi na veliko število nižjih nivojev orodij za sisteme napeljave.

Prvo orodje, s katerim se srečamo, je `ls-remote` v <<ch06-github#_pr_refs>>, ki ga uporabimo za ogled surovih referenc na strežniku.

`ls-files` uporabimo v poglavjih <<ch07-git-tools#_manual_remerge>>, <<ch07-git-tools#ref_rerere>> in <<ch07-git-tools#_the_index>> za ogled podrobnosti o vaši območni zbirki datotek.

V <<ch07-git-tools#_branch_references>> smo omenili tudi `rev-parse`, ki omogoča pretvorbo skoraj katerega koli niza v objekt SHA-1.

Večino orodij za nizko nivojske sisteme napeljave, ki jih obravnavamo, pa je v <<ch10-git-internals#ch10-git-internals>>, na kar je poglavje večinoma osredotočeno.
Njihovi uporabi smo se poskušali izogniti skozi večino preostale knjige.
